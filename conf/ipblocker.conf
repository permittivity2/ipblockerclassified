# Lines that begin with a comment (#) are ignored
# Think of each line as a a key:value setup in the following manner: key[sub-key][sub-sub-key][sub-sub-sub-key]=value
# Duplicates are allowed.  The last one wins!
# This is being used by perl so let's keep a few thigns in mind:
#   1. False value is 0.  Period.  That's it.  0 (zero) is false.  Everything else is true.
#   2. Regular expressions are PERL regular expressions.  So they are case sensitive and use PERL regular expressions.
#   3. Unless otherwise noted, sorting is regular perl sorting.  So 1, 10, 11 come before 2, 20, 21, etc.


### Global settings 
# The global settings are used for all log files unless overridden or combined by the individual log file settings.

# iptables: Default value is `which iptables`
#           Set a different iptables command
#           A simpe check is done to verify that the iptables command exists and is executable.
#           Let's talk security!
#               Running iptables as root is a bit of a security risk.  If possible set the iptables command to run as 
#               a different user.
#               A good method is to use a sudo command to run iptables as a different user.
#               This also means setting up sudo to allow the user to run iptables as a different user in passwordless mode.
#               As part of a sudo rule, be sure to allow "-N", "-A", "-D", and "-X"
#               If you wantto lock things down a bit, then you may want to set the sudo rule to only allow something like:
#                   iptablesuser ALL=(ALL) NOPASSWD: /sbin/iptables -N *IPBLOCKER_*
#                   iptablesuser ALL=(ALL) NOPASSWD: /sbin/iptables -A *IPBLOCKER_*
#                   iptablesuser ALL=(ALL) NOPASSWD: /sbin/iptables -D *IPBLOCKER_*
#                   iptablesuser ALL=(ALL) NOPASSWD: /sbin/iptables -X *IPBLOCKER_*
#               This will allow the iptablesuser to create, add, delete, and delete the chain
#               Take note that "IPBLOCKER_" i sthe value of the chainprefix.  If you change the chainprefix then you
#               will need to change the sudo rule.
#               Steps to do this:
#                 1.  Create a user to run the iptables command.  For example, iptablesuser
#                 2.  Create a group to run the iptables command.  For example, iptablesgroup
#                 3.  Add the iptablesuser to the iptablesgroup
#                 4.  Add the following line to the /etc/sudoers file:
#                       iptablesuser ALL=(ALL) NOPASSWD: /sbin/iptables
#                      Or, add the four lines above --- again the four lines are a guess and may not be correct.                        
#                 5.  Set the iptables command to the following:
#                       iptables=sudo -u iptablesuser /sbin/iptables
# iptables=/usr/sbin/iptables_some_other_location
iptables=sudo /sbin/iptables

# log4perlconf: Default value is /etc/ipblocker/log4perl.conf
#               The location of the log4perl configuration file.
# log4perlconf=/some/other/place/log4perl.conf

# lockfile: Default is /var/run/iptables.run
#           The location of the lock file
#           The lock file is used to try to prevent multiple instances of this script from running at the same time.
# lockfile=/some/other/directory/iptables.run

# queuechecktime:   Default value is 1
#                   The number of seconds to wait to check to see if there are entries in the queue to process
#                     Prevents the script from going CPU crazy and checking the queue as fast as possible.
#                     You can set this to 0 to check the queue as fast as possible but I would not recommend it.
#                   Once a queue entry is found then the queue is checked continuously until the queue is empty.
#                   I see very little utility in having this set to 0 or even less than 1 second.
queuechecktime=3

# queuecycles:  Default value is LONG_MAX (usually 9223372036854775807)
#               When the queue is empty, this integer is decremented every "queuechecktime" seconds.
#               When this hits zero, the queue is set to end(), no other items are allowed on the queue, and the 
#               module will end.
#               This is nice to set for some testing and you want the script to end after a certain number of cycle 
#               checks of the queue when the queue is empty.
#               In normal operation, this should be left tl LONG_MAX.
# queuecycles=40

# readentirefile:   Default value is 0 (false)
#                   Whether or not the entire log file is read each time.  If set to 0 (false), then we only read 
#                   from the end of the last read (or the beginning if it is the first read or if the log file has 
#                   been allegedly rotated)
#                   Reading from last read is faster, but if the log file is rotated AND the log file grows larger 
#                   than the last read, then we may miss some entries.
#                   For most situations, this should be left as the default of 0.
#                   If you rotate your log files frequently AND get a lot of traffic, then you may want to 
#                   set this to 1.
readentirefile = 0

# cycles:   Default value is LONG_MAX (usually 9223372036854775807)
#           This is how many times a log file will be reviewed.
#           This is a global value and can be set for each log file individually.
#           (Very bad naming of a variable, sorry)
# cycles=25

# cyclesleep:   Default is 0.5 seconds
#               This is how many seconds to sleep between checking a log file.
#               This is a global value and can be set for each log file individually.
#                This gets a bit complex to decide but here goes:
#                If you are always reviewing the entire log file, then this value is rather important.
#                   Reviewing the entire log file means that you are not using the "readentirefile" setting.
#               Usually, if you want to change this then you will want to change it for each log file individually.
#               Example: If you want to read the auth.log file every 5 seconds then you would set this to 5.
#               The module will seek to the last read position and then read the log file from there.  Of course, if
#               "readentirefile" is set to 1 then the entire file is read each time.
#               For those of you concerned about the performance of the system, this is a read action so it should be 
#               pretty fast, even for "slow" systems.
# cyclesleep=1

# totalruntime: Default is LONG_MAX (usually 9223372036854775807) seconds
#               This is the total amount of time that the script will run in seconds.
#               This is nice to set if you have this ran out of cron and want it to gracefully die and reload like 
#               once an hour or something.
#               Also nice for testing.
# totalruntime = 120

# nice:     Default is 0
#           Process nice level on the OS
# nice=15  # Not yet implemented

# PRODMODE: Default is 0 (false)
#           Set this to a perl true value (1) to run in prod mode.
#           Test mode is 0 (false) and will NOT run any iptable command but will log what it would have been done.
PRODMODE=1

# chainprefix:  Default is IPBLOCKER_
#               This is the prefix for the iptables chain names.
#               The chain names are created as follows:
#                 ${chainprefix}${logname}
#                All actions are performed from ${chainprefix}global
#               The default is IPBLOCKER_ but you can change it if you want.
#               When you do an 'iptables -nvL' you will see the chain prefix in the chain names.
chainprefix=IPBLOCKER_

# globalchains: Default is INPUT,OUTPUT,FORWARD
#               These are the chains that {chainprefix}global will be added to.
#               All other logger chains will be added as an iptables jump rule to {chainprefix}global
#               The logger rules are then added to the logger chains.
#               Instead of adding the rules to the INPUT,OUTPUT,FORWARD chains, you can
#                 add them to a different chain.  For example, you could add them to a chain
#                 called "MailServer" and then that chain would have to be added to the
#                INPUT,OUTPUT,FORWARD chains (or whatever chains you want).
#                This might be useful to change if you want to add the rules to a dummy chain but
#                is not actually used.... maybe for pre-production testing or something.
#                Or, maybe you only want rules acted on the INPUT chain and not the OUTPUT chain.
#                Having FORWARD is a bit aggressive but to each their own.
#                This value must be a comma separated.  No spaces.
globalchains=INPUT,OUTPUT,FORWARD

# denylist:  Deny these IPs, almost always.  The "allowdeny" value takes precedence.  See below.
#            This denylist is added to the "chainprefix" global chain.
denylist[01]=165.232.121.37
denylist[02]=165.232.121.36

# allowlist:    Allow these IPs, almost always.  The allowdeny value takes precedence.  See below.
#               The allowlist is added to the "chainprefix" global chain.
allowlist[01]=23.116.91.68/29
allowlist[02]=127.0.0.0/8
allowlist[03]=10.0.0.0/8
allowlist[04]=192.168.0.0/16
allowlist[05]=192.168.0.0/12


# allowdeny:    Individual log files settings for this value take precedence over the general settings here
#                Allow,Deny means that the allowlist is processed first and then the denylist is processed.
#                   Items in the allowlist will be allowed even if they are in the denylist.
#                Deny,Allow means that the denylist is processed first and then the allowlist is processed.
#                   Items in the denylist will be denied even if they are in the allowlist.
#               I would not change this unless you know what you are doing.  You have the potential to lock yourself out of your
#               own system.
allowdeny=Allow,Deny

# minlogentry:   Default is 300 seconds
#                This is the minimum amount of time in seconds to pass before the module will give some kind of
#                INFO message.
#                Details:  A queue is used for all the activity for iptables.  A while loops runs and checks the
#                queue for entries every second.  If at least minlogentry seconds have passed since then an INFO
#                message is logged.  This is to prevent the log from being filled with messages but still let you
#                know that the script is running.
#                For systems with a lot of IPs to block then set this higher.  For systems with very few IPs to
#                block then set this lower. 
#                This is actually a very low hit to the system so I would not worry about it too much.
minlogentrytime=10


### Not yet implemented....
# ignoreinterfaceips:   Finds the IPs of each interface and adds them to the allow list.
#                       Some logs have the IP of the interface in the log file.
#                       This is a perl true/false value.  If it is set to 0 (false) then the IPs of each interface 
#                       will be added to the allowlist.
#                       If you keep allowdeny set  to Allow,Deny then this will keep you from blocking your own IPs.
#                         Or, at least that is the idea!  This is totally based on Net::Ifconfig::Wrapper so... do 
#                         some testing to make sure that it is working as expected.
#                       I encourage leaving this as 0 (false) but it is here if you need it.  
#                       The default value, if not set, is 0 (false)
# ignoreinterfaceips=0  # Not yet implemented

### End of Global settings



# Settings for each log file from here down

### The authlog settings:
# The "logs_to_review" hash is a list of log files to review.  Each log file has a unique name.  The name is used 
#   to reference the log file in other parts of the configuration file.
#   In the exampple of "authlog", the string "authlog" could be any alphanumeric string.  It is just used for reference.

# load: Defailt value is 1.
#       If set to 1 (true) then the log file will be reviewed.
#       This is just an easy way to keep configs in here but the script/module will not review or read the log file.
#       Chain creation will still happen, though.
logs_to_review[authlog][load] 				    = 1

# file: The "file" value is the location of the log file to review.
logs_to_review[authlog][file]				    = /var/log/auth.log

# readentirefile:   Default value is global value of "readentirefile"
#                   Whether or not the entire log file is read each time.  If set to 0 (false), then we only read 
#                   from the end of the last read (or the beginning if it is the first read or if the log file has 
#                   been allegedly rotated)
#                   Reading from last read is faster, but if the log file is rotated AND the log file grows larger 
#                   than the last read, then we may miss some entries.
#                   For most situations, this should be left as the default of 0.
#                   If you rotate your log files frequently AND get a lot of traffic, then you may want to 
#                   set this to 1.
#                   Future enhancement: This should be enhanced to check the inode, file size, last change time, etc.  
#                   But for now, it is pretty dumb.
logs_to_review[authlog][readentirefile]	    = 0

# libpath:  Default value is null.
#           This is an extra library path for modules.
#           Future Enhancement:  Let this be a comma separated list and be an array
# Examples:
#   logs_to_review[authlog][libpath]            = /home/johnboy/git/ipblockerclassified/Net-IPBlocker/lib/
#   logs_to_review[authlog][grepmodule]     	= Net::IPBlocker::GrepRegexpsDefault
#   logs_to_review[authlog][grepmodule]     	= Net::IPBlocker::GrepRegexpsSSHD
logs_to_review[authlog][libpath]            = /home/gardner/git/ipblockerclassified/Net-IPBlocker/lib/

# module:   Default value is Net::IPBlocker::ReviewLogDefault
#           This is the module that is used to review the log file.
#           This can be a "::" separated path to the module.  For example, Net::IPBlocker::ApacheLogs.
#           This can alsop be a "/" separated path to the module.  For example, 
#               /home/johnboy/git/ipblockerclassified/Net-IPBlocker/lib/ApacheLogs.pm
#           This setting is expected to grow over time to accomodate different log files such as mail log, apache 
#           logs, ftp logs, etc.
#           Module Requirements:
#               The module must be a class and must have a function called "new" to instantiate (bless) the class.
#               The "new" function should be able to take a hash reference the following keys:
#                   logobj:   This is all the configs associated with the log file along with the log contents.
#                   parentobjself: This is the object of the parent module.  This provides a lot of extra information.
#                   iptablesqueue_enqueue: This is a reference to the iptablesqueue_enqueue function.  This is used to
#                       add rules to the iptables queue to be ran.
#               The must have at least one function called "grep_regexps" that takes a logobject as a 
#               hash reference and returns a hash reference of IPs to block.  The IPs are a key and the value is whatever you want.
#               The module has access to the iptablesqueue_enqueue function and COULD set the queue directly and always return an empty hash.
#               I do not reccomend this but it is possible.
#               Doing that will bypass multiple settings such as ports, protocols, directions, etc.
# logs_to_review[authlog][module] = Net::IPBlocker::ReviewLogSSH

# cycles: Default is global value of "cycles"
#   The number of times the log file will be reviewed.
# logs_to_review[authlog][cycles]                 = 10

# cyclesleep:   Default is global value of "cyclesleep"
#               The number of seconds to sleep between cycles.  Can be partial seconds.  So 0.5 is a half second.
logs_to_review[authlog][cyclesleep] = 1.5

# protocols:    Default is no protocol.
#               This is the protocol(s) that will be blocked in the firewall.
#               If the protocol is not set, then the default is no protocol.
#               You do not have to set protocol unless you set ports.
#               If you set ports but not protocol then the script will add the IP to the firewall but will not add 
#                the protocol and thus no ports.  So, the entire IP will be blocked.
#               There is no checking if the protocol is valid.  So if you set protocol=blah then the script will give 
#                an error when the rule tries to be added to the firewall.
#               Must be separated by non-alphanumeric-digit characters.  So tcp,udp is good.  tcp udp is good.  tcp-udp is good.
#                The "_" character is not allowed.  So tcp_udp is not good.
#                Most folks will use commas but whatever floats your boat.
logs_to_review[authlog][protocols] = tcp,udp

# ports:    Default is no ports
#           This is the port(s) that will be matched for blocking of IPs in the log file.
#           If the ports are not set, then the default is no ports.
#           You do not have to set ports but if you do, then you must set protocol.
#           Example:  ports=22,21,23 means that the script will block IPs that are trying to connect to 
#            ports 22, 21, and 23.
#           Must be separated by commas and ranges are accepted.  The iptables command has a maximum of 15 comma 
#           separated values.
#           Example 1:  logs_to_review[authlog][ports]                  = 22,21,23
#           Example 2:  logs_to_review[authlog][ports]                  = 22,21,23,1000:2000,3000:4000
#           Example 3:  logs_to_review[authlog][ports]                  = 22,21,23,1000:2000
#           Bad ports will log as an error and the rule will not be added.
#           If you set ports but no protocol then the entire IP will be blocked on the protocol.
logs_to_review[authlog][ports] = 22

# directions:   Default is source
#               This is the direction(s) that will be blocked in the firewall.
#                 If the direction is not set, then the default is source
#                Must be separated by non-digit-alphanumeric characters.  So source,destination is good.  source destination is good.
#                 source-destination is good.
#                 The "_" character is not allowed.  So source_destination is not good.
#                Most folks will use commas but whatever floats your boat.
#                Accepted values are source, destination, random
#               Example 1:  logs_to_review[authlog][direction]              = source,destination
#               Example 2:  logs_to_review[authlog][direction]              = source
#               Example 3:  logs_to_review[authlog][direction]              = destination
#               Example 4:  logs_to_review[authlog][direction]              = source,destination,cool,blah,blah,blah
#               In example 4, only source and destination will be used.  The values of cool,blah,blah,blah will be ignored.
#               I think most folks will not set this or just use 'source' but I can see value in blocking the destination as well.
#               If you want to screw with hackers a bit, then set this to 'destination' and then they will not get any response
#               The "random" value will ignore (for now) any other value set.  If random is used then source or 
#               destination will be randomly chosen for each IP rule.
#               logs_to_review[authlog][directions]          = source,destination
#               logs_to_review[authlog][directions]          = destination
logs_to_review[authlog][directions] = source
# logs_to_review[authlog][directions]          = random

# allowdeny:    Default value is global value of "allowdeny"
#               This is the order preference for whitelisted and blacklisted IPs.
#               If the order is set to "Deny,Allow" then blacklisted IPs will ALWAYS be 
#                 blocked (even if they are in the whitelisted hash)!
#               If the order is set to "Allow,Deny" then whitelisted IPs will ALWAYS be 
#                 allowed (even if they are in the blacklisted hash)!
#               If the order is not set or is set incorrectly then the default is "Allow,Deny"
#               When using authlog, I would reccomend setting the order to "Allow,Deny" so that whitelisted IPs are 
#                 always allowed for ssh.
#               The order is case insensitive.
logs_to_review[authlog][allowdeny]          = Allow,Deny

# allowlist:    List of IPs to allow just for this log file
logs_to_review[authlog][allowlist][01]     =  127.0.0.0/8
logs_to_review[authlog][allowlist][02]     =  23.116.91.65/29

# denylist:     List of IPs to block just for this log file
logs_to_review[authlog][denylist][01]      =  5.5.5.5
logs_to_review[authlog][denylist][02]      =  6.6.6.6

# regexpdeny:   Now comes the important part!  How to decide what to block?
#               Each regular expression must have a unique value.  
#               This is just typically indexed as 01, 02, 03, 04, etc.  But it can be any Alphanumeric
#               The index is sorted in simple Perl sort.  So 1, 10, 11 come before 2, 20, 21, etc.
#               Also, lowercase will come before uppercase.  So a, b, c, A, B, C.
#               The sorting may matter because the regular expressions are applied in order.
#               Regular expressions are case insensitive therefore "Failed" is the same as "fAiLed"
#               Regular expressions are Perl regular expressions so you can do fancy *.?[]{}() stuff.
logs_to_review[authlog][regexpdeny][01] = Failed password for root from
logs_to_review[authlog][regexpdeny][02] = Failed password for invalid user  
logs_to_review[authlog][regexpdeny][03] = Did not receive identification string from
logs_to_review[authlog][regexpdeny][04] = not allowed because listed in DenyUsers

# jailtime:     The default module is Net::IPBlocker::ReviewLogDefault which has a function post_enqueue().
#               This is called after IPs are enqueued to be blocked (aka, jailed).  
#               The default module will delete the IPs from the queue that have been jailed for
#               longer than 1800 seconds.  This is a good default but you can change it if you want.
#               Also, the entire ReviewLogDefault module can be overridden by setting the module key.
#               If you override the module then the post process function post_enqueue() will not be called (unless you
#               have one in your module).
#               Value is seconds.
logs_to_review[authlog][jailtime]            = 5

# # Authlog has a special value of allowed usernames
# logs_to_review[authlog][allowedusername][01]    = gardner
# logs_to_review[authlog][allowedusername][02]    = jiggerboy
# # Authlog has a special value of not-allowed usernames
# logs_to_review[authlog][deniedusername][01] 	= root

# Special items for Net::IPBlocker::GrepRegexpsSSHD
# filterin: Before looking for IPs based on "regexpdeny" the log file is filtered for lines that match these regex
# filterout: After "filterout" and before "regexpdeny" the log file is filtered for lines that do not match these regex
# logs_to_review[authlog][filterin][01]        = sshd
# logs_to_review[authlog][filterout][01]       = sshd.*for gardner



#### Now... an example without comments

### The maillog settings:
logs_to_review[maillog][load] 				= 0
logs_to_review[maillog][file]				= /var/log/mail.log
logs_to_review[maillog][libpath]            = /home/gardner/git/ipblockerclassified/Net-IPBlocker/lib
logs_to_review[maillog][module]     	    = Net::IPBlocker::ReviewLogDefault
logs_to_review[maillog][cycles]             = 10
logs_to_review[maillog][cyclesleep]         = 1.45
logs_to_review[maillog][order]              = Allow,Deny 
logs_to_review[maillog][regexpdeny][1] 		= Relay access denied,Illegal address syntax from
logs_to_review[maillog][regexpdeny][2]		= SASL LOGIN authentication failed
logs_to_review[maillog][regexpdeny][3]		= SSL_accept error from
logs_to_review[maillog][regexpdeny][4]		= lost connection after AUTH from unknown
logs_to_review[maillog][regexpdeny][5]		= 503 5.5.1 Error: authentication
logs_to_review[maillog][regexpdeny][6]		= disconnect from.* commands=0\/0
logs_to_review[maillog][regexpdeny][7]		= non-SMTP command from unknown
logs_to_review[maillog][regexpdeny][8]		= connect to.*:25: Connection refused
