{"version":5,"vars":[{"name":"Net::IPBlocker","line":0,"kind":2,"definition":1},{"kind":2,"name":"strict","line":3,"containerName":""},{"name":"warnings","line":4,"containerName":"","kind":2},{"kind":2,"name":"POSIX","line":5,"containerName":""},{"kind":2,"line":6,"name":"DateTime","containerName":""},{"kind":2,"containerName":"File","line":7,"name":"Basename"},{"line":8,"name":"Util","containerName":"List","kind":2},{"line":9,"name":"HiRes","containerName":"Time","kind":2},{"kind":2,"line":10,"name":"File","containerName":"Config"},{"kind":2,"name":"Carp","line":11,"containerName":""},{"kind":2,"line":12,"containerName":"Log","name":"Log4perl"},{"kind":2,"containerName":"Log","line":13,"name":"Any"},{"line":14,"containerName":"Data","name":"Dumper","kind":2},{"kind":2,"line":15,"name":"IPv6","containerName":"Regexp"},{"kind":2,"line":16,"containerName":"LockFile","name":"Simple"},{"kind":2,"line":17,"name":"Path","containerName":"File"},{"kind":2,"name":"Wrapper","line":18,"containerName":"Net::Ifconfig"},{"line":21,"containerName":"","name":"threads","kind":2},{"kind":2,"name":"Queue","line":23,"containerName":"Thread"},{"line":24,"kind":13,"definition":"my","name":"$LoggerTIDS","containerName":null,"localvar":"my"},{"kind":13,"definition":"my","line":27,"localvar":"my","containerName":null,"name":"$IptablesQueue"},{"name":"Thread","line":27,"containerName":"Queue","kind":12},{"kind":12,"line":27,"name":"new","containerName":"Net::IPBlocker"},{"localvar":"my","name":"$IptablesTIDS","containerName":null,"kind":13,"definition":"my","line":28},{"kind":13,"line":31,"name":"$Data","containerName":null},{"line":31,"name":"Dumper","containerName":"Sortkeys","kind":12},{"line":32,"containerName":null,"name":"$Data","kind":13},{"line":32,"name":"Dumper","containerName":"Indent","kind":12},{"line":39,"kind":13,"definition":"my","name":"$logger","containerName":null,"localvar":"my"},{"line":41,"definition":"my","kind":13,"name":"$lock_obj","containerName":null,"localvar":"my"},{"definition":"my","kind":13,"line":46,"localvar":"my","name":"$REGEX_IPV4","containerName":null},{"line":47,"definition":"my","kind":13,"name":"$REGEX_IPV6","containerName":null,"localvar":"my"},{"definition":"my","kind":13,"line":48,"localvar":"my","name":"$IPTABLESRUNLINE","containerName":null},{"containerName":"Net::IPBlocker","line":52,"name":"%tracker","definition":"our","kind":13},{"name":"%DEFAULTS","containerName":null,"localvar":"my","line":54,"definition":"my","kind":13},{"kind":12,"name":"allowdeny","line":55},{"kind":12,"line":56,"name":"allowlist"},{"kind":12,"name":"configsfile","line":57},{"name":"dumpconfigsandexit","line":62,"kind":12},{"kind":12,"name":"denylist","line":63},{"kind":12,"name":"forceremovelockfile","line":64},{"kind":12,"line":65,"name":"globalallowlist"},{"kind":12,"line":66,"name":"chainprefix"},{"kind":12,"line":67,"name":"globalchains"},{"kind":12,"line":68,"name":"globaldenylist"},{"kind":12,"line":69,"name":"globalregexallowlist"},{"name":"globalregexdenylist","line":70,"kind":12},{"line":71,"name":"ignoreinterfaceips","kind":12},{"name":"iptables","line":72,"kind":12},{"line":73,"name":"lockfile","kind":12},{"name":"log4perlconf","line":74,"kind":12},{"kind":12,"line":75,"name":"loglevel"},{"kind":12,"line":79,"name":"logcontents"},{"name":"logs_to_review","line":80,"kind":12},{"name":"logwatch_interval","line":81,"kind":12},{"kind":12,"name":"prodmode","line":82},{"name":"queuechecktime","line":83,"kind":12},{"line":84,"name":"queuecycles","kind":12},{"name":"LONG_MAX","line":84,"kind":12},{"name":"readentirefile","line":85,"kind":12},{"kind":12,"name":"totalruntime","line":86},{"line":86,"name":"LONG_MAX","kind":12},{"name":"$VERSION","line":101,"containerName":"Net::IPBlocker","definition":"our","kind":13},{"kind":12,"detail":"()","range":{"start":{"line":360,"character":0},"end":{"character":9999,"line":404}},"definition":"sub","line":360,"children":[{"line":361,"kind":13,"definition":"my","containerName":"new","name":"$class","localvar":"my"},{"localvar":"my","containerName":"new","name":"$args","kind":13,"definition":"my","line":362},{"kind":13,"line":364,"name":"$args","containerName":"new"},{"containerName":"new","line":366,"name":"$args","kind":13},{"kind":13,"name":"$args","line":368,"containerName":"new"},{"localvar":"my","containerName":"new","name":"$configsfile","definition":"my","kind":13,"line":373},{"line":373,"containerName":"new","name":"$args","kind":13},{"kind":13,"line":373,"containerName":"new","name":"$DEFAULTS"},{"localvar":"my","containerName":"new","name":"$self","kind":13,"definition":"my","line":375},{"kind":13,"line":376,"name":"$configsfile","containerName":"new"},{"kind":13,"containerName":"new","line":377,"name":"$args"},{"kind":13,"line":381,"name":"$self","containerName":"new"},{"line":381,"name":"$class","containerName":"new","kind":13},{"kind":13,"name":"$self","line":385,"containerName":"new"},{"containerName":"new","line":385,"name":"load_configs","kind":12},{"containerName":"new","line":387,"name":"$self","kind":13},{"kind":13,"line":389,"containerName":"new","name":"$self"},{"containerName":"new","line":390,"name":"$self","kind":13},{"kind":13,"line":391,"containerName":"new","name":"$self"},{"kind":13,"containerName":"new","line":393,"name":"$self"},{"kind":13,"containerName":"new","line":399,"name":"$logger"},{"name":"$log","line":399,"containerName":"new","kind":13},{"line":400,"containerName":"new","name":"$logger","kind":13},{"line":400,"containerName":"new","name":"info","kind":12},{"kind":13,"line":401,"containerName":"new","name":"$logger"},{"kind":12,"line":401,"name":"debug","containerName":"new"},{"line":401,"containerName":"new","name":"$self","kind":13},{"containerName":"new","line":401,"name":"$logger","kind":13},{"name":"is_debug","line":401,"containerName":"new","kind":12},{"kind":13,"name":"$self","line":403,"containerName":"new"}],"signature":{"documentation":"1; # End of Net::IPBlocker\npackage Net::IPBlocker;\n\nuse 5.8.0;\nuse strict;\nuse warnings;\nuse POSIX qw(LONG_MAX);\nuse DateTime;\nuse File::Basename;\nuse List::Util qw(any);\nuse Time::HiRes qw(usleep gettimeofday time);\nuse Config::File;\nuse Carp;\nuse Log::Log4perl qw(get_logger :nowarn :levels);\nuse Log::Any qw($log);\nuse Data::Dumper;\nuse Regexp::IPv6     qw($IPv6_re);\nuse LockFile::Simple qw(lock trylock unlock);\nuse File::Path       qw(make_path);\nuse Net::Ifconfig::Wrapper;\n\n# Thread setup\nuse threads;\n# use threads::shared;\nuse Thread::Queue;\nmy $LoggerTIDS = ();                     # Thread IDs for tracking or whatever\n\n# Another queue for iptables commands\nmy $IptablesQueue = Thread::Queue->new();\nmy $IptablesTIDS  = ();                     # Thread IDs for tracking or whatever\n\n# Data Dumper setup\n$Data::Dumper::Sortkeys = 1;\n$Data::Dumper::Indent   = 1;\n\n### Global Variables  (clearly the threading stuff is global, duh)\n## I hate global variables!\n# logger --- I really debated whether to make this global or not.  I decided to make it global because it is used\n#   in the signal interupts and those use prototyped subs.  I don't know how (if possible) to pass $self to the\n#   signal interupt subs with so much threaded.\nmy $logger;     # This gets set in new() but is just set to $log from Log::Any\n                # I wrote all this for Log::Log4perl and then realized Log::Any is the better path.\nmy $lock_obj;    # This is the lock object and is set in set_lockFile()\n                 # Needs to be global because it is used in the signal interupts and those use prototyped subs.\n## Regex for IPv4 and IPv6 capturing.\n#   This is critical and needs be consistent across the entire module\n# my $REGEX_IPV4 = q/.*\\b((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\b.*/;\nmy $REGEX_IPV4 = q/\\b((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\b/;\nmy $REGEX_IPV6      = q/\\b($IPv6_re)\\b/;\nmy $IPTABLESRUNLINE = 0;    #This is just an odd one.  It is used to track the line number of the sub iptables_thread()\n                            #  where run_iptables() is called.  This is used in the signal interupts to print out the\n                            #  line number of where the iptables command was run.  This is used for debugging.\n                            #  This is set in the iptables_thread() sub.\nour $tracker = {};          # Mostly chains added and rules added are stuffed in here for tracking purposes\n                            # There has got to be a better way but for now it is just a global hash reference.\nmy $DEFAULTS = {\n    allowdeny            => 'Allow,Deny',\n    allowlist            => {},\n    configsfile          => '/etc/ipblocker/ipblocker.conf',\n    # cycles               => LONG_MAX,  # How long to run.  This is irrespective of any other cycle or queue cycle.\n    #                                    # Nice for testing or maybe you want to run this for a certain amount of time and \n    #                                    # and restart it out of cron or something.\n    # cyclesleep           => 0.5,\n    dumpconfigsandexit   => 0,\n    denylist             => {},\n    forceremovelockfile  => 0,\n    globalallowlist      => {},\n    chainprefix          => \"IPBLOCKER_\",\n    globalchains         => [qw / INPUT OUTPUT FORWARD /],\n    globaldenylist       => {},\n    globalregexallowlist => {},\n    globalregexdenylist  => {},\n    ignoreinterfaceips   => 1,                                   #This adds the IPs from the interfaces to the allowlist\n    iptables             => '/sbin/iptables',\n    lockfile             => '/var/run/ipblocker.run.default',\n    log4perlconf         => '/etc/ipblocker/log4perl.conf',\n    loglevel             => 'Will use value from log4perl.conf', # Can be set from calling script.\n                                                                 #   If no value sent from calling script, then\n        #   use value from configs file.  If no value in configs file then I think the\n        #   Easy Init log4perl is used which defaults to DEBUG, i think.\n    logcontents       => {},\n    logs_to_review    => {},\n    logwatch_interval => 3,\n    prodmode          => 0,\n    queuechecktime    => 1,\n    queuecycles       => LONG_MAX,\n    readentirefile    => 0,\n    totalruntime      => LONG_MAX,  # How long to run in seconds.  This is irrespective of any other cycle or queue \n                                    # cycle.  Nice for testing or maybe you want to run this for a certain amount of \n                                    # time and restart it out of cron or something.\n};\n\n=head1 NAME\n\nNet::IPBlocker - Blocks IPs based on regex from specified log files\n\n=head1 VERSION\n\nVersion 0.01\n\n\nour $VERSION = '0.01';\n\n\n=head1 SYNOPSIS\n\nBlocks IPs based on Regular Expressions in specified log files.\n\n use Net::IPBlocker;\n my $foo = Net::IPBlocker->new();\n $foo->go(); \n\nYou can send all configs into the constructor as a hash, I really advise using a config file.  \nThe default config file is F</etc/ipblocker/ipblocker.conf> but you can set it to another file.\nIf a config file is not found, it will use default values for everything and that will probably not work very well.\n\n my $foo = Net::IPBlocker->new( { configsfile => '/etc/ipblocker/ipblocker.conf' } );\n $foo->go();\n\n=head2 Future Enhancements\n\n=over 4\n\n* * Add reload ability of configs\n\nThis will make it so a full stop and restart does not need to happen to reload configs.\n\n* * Add jail time for IPs\n\nThis involves adding a database to store the IPs and the time they were blocked.\nThis also means adding a mechanism to unblock IPs after a certain amount of time.\nLuckily, I have threaded this so adding that is just a matter of adding another thread.\nI am open to ideas of what database to use.  I am thinking SQLite.\nOr, possibly just a file with the IPs (the rule) and the time they are to be unblocked (deleted \nfrom iptables).\n\n* * Add synchronized appender logging:\n      \nhttps://metacpan.org/dist/Log-Log4perl/view/lib/Log/Log4perl/Appender/Synchronized.pm\n\n* * Fix the ability for Log4perl to re-read the \"log4perl.conf\" which seems to not work right now\n\n* * Change from using log4perl to Log::Any\n\nI didn't know about Log::Any when I started this.  I am open to changing this to Log::Any but I need to \nfigure out how to do that.\n\n* * my $interfaces = Net::Ifconfig::Wrapper::Ifconfig('list', '', '', '');\n\nThis is a list of interfaces.  Need to figure out how to use this to get the IP address of the\ninterfaces.  Need to add those IPs to the global allow list.\n\n* * Fix sub add_ifconfig_ips_to_allowlist() to handle IPv4 and IPv6 addresses\n\nThis really findes the IPs on a network interface and adds them to the global allow list.\nUsually,we don't want to accidentally block our own IPs.\nOf course, this will mean adding an option to the configs file to turn this on or off.\n\n\n=head2 DESCRIPTION\n\nThis has been a very long running project of mine.  I have been using this script for years to block IPs and then \nrealized Fail2Ban exists.  I have tried to use Fail2Ban multiple times but it never seems to work right for me.\nIt seems to lock-up. \nThis module tries to incorporate the ideas of my past experience with the general idea of Fail2Ban.\n\nI highly encourage you to use a config file.  The default config file is in the same location as this module but you \ncan set it to another file.\n\nWhen installing this, you should also receive a script called \"ipBlocker.pl\".  This is a sample script that uses \nthis module.\n\nFinally, for now, this module use log4perl.  I didn't realize there was a heated debate about log4perl vs Log::Any vs \nwhatever else.  I am open to changing this to Log::Any but I need to figure out how to do that.\n\n=head1 SUBROUTINES/METHODS\n\n=head2 new\n\nReads configs form a file if exists otherwise uses defaults.\nSets up a class and returns a blessed \"object\".\nThe sub go() is where the action starts.\nThe sub new() just gets a few things setup.\n\nExample:\n\n  use IPblocker;\n\n  my $args = {\n    configsfile         => '/etc/ipblocker/ipblocker.conf',\n    dumpconfigsandexit  => '0', # True false value\n    forceremovelockfile => '0', # True false value\n    iptables            => 'sudo /sbin/iptables',\n    lockfile            => '/var/run/ipblocker.run',\n    log4perlconf        => '/etc/ipblocker/log4perl.conf',  #Can also be 0 to use default log4perl\n    loglevel            => 'DEBUG', # Can be TRACE DEBUG INFO WARN ERROR FATAL\n    prodmode            => '0', # True false value --- Determins if the iptables commands are actually run\n    queuechecktime      => '3', # How long to wait when the queue is empty before checking again. Any float value.\n    readentirefile      => '0', # True false value --- Determines if the entire log file is read or\n                                # new entries since last run are read.\n    cycles              => 'LONG_MAX', # How many times to run the main loop.  LONG_MAX is the default.\n    ### All configs can be set via a hash reference\n  };\n\n  my $ipb    = IPblocker->new($args);\n\n=head3 All arguments to new() and the defaults\n\n=head4 allowdeny\n\nallowdeny            => 'Allow,Deny',\n\nSet to 'Allow,Deny' or 'Deny,Allow' to determine the order of the allow and deny lists.\nSeteting to 'Allow,Deny' means the allow list is processed first and then the deny list is processed.\nMeaning, as an example, if 1.1.1.1 is on the allow list and allowdeny is set to Allow,Deny, then\nthe IP of 1.1.1.1 will never be blocked.  If allowdeny is set to Deny,Allow, then it is possible \nfor 1.1.1.1 to be blocked.\n\n=head4 allowlist\n\nallowlist            => {},\n\nA list of IPs to allow.  This is a hash reference.  The key is the order to allow the IP.  The value is the IP.\nExample:\n\n allowlist => (\n  '01' => '1.1.1.1',\n  '4' => '1.1.1.4',\n  '10' => '1.1.1.2',\n  '100' => '1.1.1.3',\n  \n )\n\nThe allow list is sorted in standard Perl sort order.  So, be sure to pad 0's or whatever to the front of the key.\n\n=head4 configsfile\n\nconfigsfile          => '/etc/ipblocker/ipblocker.conf',\n\nUse a config file!  This is the default config file location.  You can set it to another file.\n\n=head4 cycles\n\ncycles               => LONG_MAX,\n\nHow many times to run the main loop.  LONG_MAX is the default.  Why not infinity?  Because I don't want to.\n\n=head4 cyclesleep\n\ncyclesleep           => 0.5,\n\nHow long to sleep between cycles.  This is in seconds.  Default is 0.5 seconds.  You can use a float value.\n\n=head4 dumpconfigsandexit\n\ndumpconfigsandexit   => 0,\n\nIf set to 1 (true), then the configs are dumped to stdout and the script exits.  This is useful for creating a \nconfig file.\n\n=head4 denylist\n\ndenylist             => {},\n\nSimilar to allow list but for IPs to deny.  This is a hash reference.  The key is the order to deny the IP.\n\n=head4 forceremovelockfile\n\nforceremovelockfile  => 0,\n\nThis will force removal of lock file (if possible) before starting.  Seriously, you better know what you are doing.\n\n=head4 chainprefix\n\nchainprefix          => \"IPBLOCKER_\",\n\nThis is the prefix for the chains created in iptables.  This is the prefix you will see in iptables for \nall the chains created by this module.\n\n=head4 globalchains\n\nglobalchains         => [qw / INPUT OUTPUT FORWARD /],\n\nThis is a list of the global chains to add the global chain to.\nThe global chain is where all the subordinate file logger chains are added.\n\nI see some value in adding the global chain to some other chain but by default we add it to INPUT, OUTPUT, and FORWARD.\nOr, possibly, you don't want to add to the FORWARD chain.\nMaybe you onkly care about INPUT table.  I don't know.  Whatever works best for you.\n\n=head4 iptables\n\niptables             => '/sbin/iptables',\n\nThis is the iptables command to use.  You can use sudo or whatever you want.\nI really encourage using sudo but by default it is not used.  \nUsing sudo and non-root user is a bit more work.  You need to setup sudoers to allow the user to run iptables.\nHowever, I think it is worth it for an added measure of security.\nIf you change this to use sudo, then you may also need to change the lockfile location to a location that the user \ncan write to.\n\n=head4 lockfile\n\nlockfile             => '/var/run/ipblocker.run.default',\n\nThis is the lock file location to use to try to prevent multiple instances from running.\n\n=head4 log4perlconf\n\nlog4perlconf         => '/etc/ipblocker/log4perl.conf',\n\nThis is the log4perl configuration file to use.  You can also set this to 0 to use the default log4perl configuration.\n\n=head4 loglevel\n\nloglevel             => 'INFO'\n\nTHis can be TRACE DEBUG INFO WARN ERROR FATAL.\n\n=head4 prodmode\n\nprodmode          => 0,\n\nThis is a true/false value.  If set to 1 (true), then the iptables commands are actually run.  If set to 0 (false), \nthen the iptables commands are not run.  This is useful for testing.\n\nBy default, this is set to 0 (false).\n\n=head4 queuechecktime\n\nqueuechecktime    => 1,\n\nWhen the queue is empty, how long to wait before checking again.  When the queue is not empty, this value is ignored\n\n=head4 queuecycles\n\nqueuecycles       => LONG_MAX,\n\nHow many times to check the queue.  LONG_MAX is the default.  Why not infinity?  Because I don't want to.\n\n=head4 readentirefile\n\nreadentirefile    => 0,\n\nThis is a true/false value.  If set to 1 (true), then the entire log file is read.  If set to 0 (false), then only\nnew entries since the last run are read.\nThis can aslo be set per log file in the configs file.\n\n=head4 totalruntime\n\ntotalruntime      => LONG_MAX,\n\nHow long to run in seconds.  This is irrespective of any other cycle or queue cycle.  Nice for testing or maybe you\nwant to run this for a certain amount of time and restart it out of cron or something.\n\n Description:  Creates a new class/object\n Returns:      A blessed reference \"object\"","parameters":[],"label":"new()"},"name":"new","containerName":"Net::IPBlocker"},{"kind":12,"line":365,"name":"carp"},{"kind":12,"line":369,"name":"croak"},{"kind":12,"name":"configsfile","line":373},{"kind":12,"line":373,"name":"configsfile"},{"name":"configsfile","line":376,"kind":12},{"name":"clargs","line":377,"kind":12},{"kind":12,"line":387,"name":"configs"},{"name":"dumpconfigsandexit","line":387,"kind":12},{"kind":12,"line":389,"name":"configs"},{"line":389,"name":"configsfile","kind":12},{"name":"configs","line":390,"kind":12},{"kind":12,"name":"globalchain","line":390},{"name":"configs","line":391,"kind":12},{"kind":12,"name":"dumpconfigsandexit","line":391},{"line":393,"name":"recursiveHashPrint","kind":12},{"name":"configs","line":393,"kind":12},{"name":"Dumper","line":401,"kind":12},{"kind":12,"definition":"sub","range":{"start":{"line":408,"character":0},"end":{"line":419,"character":9999}},"detail":"($ref,$prefix)","children":[{"name":"$ref","containerName":"recursiveHashPrint","localvar":"my","line":409,"kind":13,"definition":"my"},{"kind":13,"containerName":"recursiveHashPrint","line":409,"name":"$prefix"},{"containerName":"recursiveHashPrint","line":410,"name":"$prefix","kind":13},{"containerName":"recursiveHashPrint","line":410,"name":"$prefix","kind":13},{"kind":13,"line":412,"name":"$ref","containerName":"recursiveHashPrint"},{"name":"$key","containerName":"recursiveHashPrint","localvar":"my","line":413,"kind":13,"definition":"my"},{"containerName":"recursiveHashPrint","line":413,"name":"$ref","kind":13},{"localvar":"my","containerName":"recursiveHashPrint","name":"$new_prefix","kind":13,"definition":"my","line":416},{"kind":13,"line":416,"containerName":"recursiveHashPrint","name":"$prefix"},{"kind":13,"line":417,"containerName":"recursiveHashPrint","name":"$ref"},{"kind":13,"line":417,"name":"$key","containerName":"recursiveHashPrint"},{"kind":13,"line":417,"containerName":"recursiveHashPrint","name":"$new_prefix"}],"line":408,"signature":{"label":"recursiveHashPrint($ref,$prefix)","parameters":[{"label":"$ref"},{"label":"$prefix"}],"documentation":" Description:  Recursively prints the configs in teh format of a config file\n Returns:      Nothing"},"containerName":"Net::IPBlocker","name":"recursiveHashPrint"},{"line":420,"containerName":null,"name":"%ref","kind":13},{"name":"$line","containerName":null,"localvar":"my","line":423,"definition":"my","kind":13},{"containerName":null,"line":423,"name":"$ref","kind":13},{"name":"$line","line":424,"containerName":null,"kind":13},{"kind":13,"line":425,"containerName":null,"name":"$line"},{"line":426,"name":"%line","containerName":null,"kind":13},{"localvar":"my","containerName":null,"name":"$line","kind":13,"definition":"my","line":430},{"line":431,"name":"$line","containerName":null,"kind":13},{"containerName":null,"line":432,"name":"$line","kind":13},{"kind":13,"name":"$line","line":433,"containerName":null},{"definition":"sub","range":{"end":{"line":502,"character":9999},"start":{"line":451,"character":0}},"detail":"()","kind":12,"signature":{"documentation":"1; # End of Net::IPBlocker\npackage Net::IPBlocker;\n\nuse 5.8.0;\nuse strict;\nuse warnings;\nuse POSIX qw(LONG_MAX);\nuse DateTime;\nuse File::Basename;\nuse List::Util qw(any);\nuse Time::HiRes qw(usleep gettimeofday time);\nuse Config::File;\nuse Carp;\nuse Log::Log4perl qw(get_logger :nowarn :levels);\nuse Log::Any qw($log);\nuse Data::Dumper;\nuse Regexp::IPv6     qw($IPv6_re);\nuse LockFile::Simple qw(lock trylock unlock);\nuse File::Path       qw(make_path);\nuse Net::Ifconfig::Wrapper;\n\n# Thread setup\nuse threads;\n# use threads::shared;\nuse Thread::Queue;\nmy $LoggerTIDS = ();                     # Thread IDs for tracking or whatever\n\n# Another queue for iptables commands\nmy $IptablesQueue = Thread::Queue->new();\nmy $IptablesTIDS  = ();                     # Thread IDs for tracking or whatever\n\n# Data Dumper setup\n$Data::Dumper::Sortkeys = 1;\n$Data::Dumper::Indent   = 1;\n\n### Global Variables  (clearly the threading stuff is global, duh)\n## I hate global variables!\n# logger --- I really debated whether to make this global or not.  I decided to make it global because it is used\n#   in the signal interupts and those use prototyped subs.  I don't know how (if possible) to pass $self to the\n#   signal interupt subs with so much threaded.\nmy $logger;     # This gets set in new() but is just set to $log from Log::Any\n                # I wrote all this for Log::Log4perl and then realized Log::Any is the better path.\nmy $lock_obj;    # This is the lock object and is set in set_lockFile()\n                 # Needs to be global because it is used in the signal interupts and those use prototyped subs.\n## Regex for IPv4 and IPv6 capturing.\n#   This is critical and needs be consistent across the entire module\n# my $REGEX_IPV4 = q/.*\\b((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\b.*/;\nmy $REGEX_IPV4 = q/\\b((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\b/;\nmy $REGEX_IPV6      = q/\\b($IPv6_re)\\b/;\nmy $IPTABLESRUNLINE = 0;    #This is just an odd one.  It is used to track the line number of the sub iptables_thread()\n                            #  where run_iptables() is called.  This is used in the signal interupts to print out the\n                            #  line number of where the iptables command was run.  This is used for debugging.\n                            #  This is set in the iptables_thread() sub.\nour $tracker = {};          # Mostly chains added and rules added are stuffed in here for tracking purposes\n                            # There has got to be a better way but for now it is just a global hash reference.\nmy $DEFAULTS = {\n    allowdeny            => 'Allow,Deny',\n    allowlist            => {},\n    configsfile          => '/etc/ipblocker/ipblocker.conf',\n    # cycles               => LONG_MAX,  # How long to run.  This is irrespective of any other cycle or queue cycle.\n    #                                    # Nice for testing or maybe you want to run this for a certain amount of time and \n    #                                    # and restart it out of cron or something.\n    # cyclesleep           => 0.5,\n    dumpconfigsandexit   => 0,\n    denylist             => {},\n    forceremovelockfile  => 0,\n    globalallowlist      => {},\n    chainprefix          => \"IPBLOCKER_\",\n    globalchains         => [qw / INPUT OUTPUT FORWARD /],\n    globaldenylist       => {},\n    globalregexallowlist => {},\n    globalregexdenylist  => {},\n    ignoreinterfaceips   => 1,                                   #This adds the IPs from the interfaces to the allowlist\n    iptables             => '/sbin/iptables',\n    lockfile             => '/var/run/ipblocker.run.default',\n    log4perlconf         => '/etc/ipblocker/log4perl.conf',\n    loglevel             => 'Will use value from log4perl.conf', # Can be set from calling script.\n                                                                 #   If no value sent from calling script, then\n        #   use value from configs file.  If no value in configs file then I think the\n        #   Easy Init log4perl is used which defaults to DEBUG, i think.\n    logcontents       => {},\n    logs_to_review    => {},\n    logwatch_interval => 3,\n    prodmode          => 0,\n    queuechecktime    => 1,\n    queuecycles       => LONG_MAX,\n    readentirefile    => 0,\n    totalruntime      => LONG_MAX,  # How long to run in seconds.  This is irrespective of any other cycle or queue \n                                    # cycle.  Nice for testing or maybe you want to run this for a certain amount of \n                                    # time and restart it out of cron or something.\n};\n\n=head1 NAME\n\nNet::IPBlocker - Blocks IPs based on regex from specified log files\n\n=head1 VERSION\n\nVersion 0.01\n\n\nour $VERSION = '0.01';\n\n\n=head1 SYNOPSIS\n\nBlocks IPs based on Regular Expressions in specified log files.\n\n use Net::IPBlocker;\n my $foo = Net::IPBlocker->new();\n $foo->go(); \n\nYou can send all configs into the constructor as a hash, I really advise using a config file.  \nThe default config file is F</etc/ipblocker/ipblocker.conf> but you can set it to another file.\nIf a config file is not found, it will use default values for everything and that will probably not work very well.\n\n my $foo = Net::IPBlocker->new( { configsfile => '/etc/ipblocker/ipblocker.conf' } );\n $foo->go();\n\n=head2 Future Enhancements\n\n=over 4\n\n* * Add reload ability of configs\n\nThis will make it so a full stop and restart does not need to happen to reload configs.\n\n* * Add jail time for IPs\n\nThis involves adding a database to store the IPs and the time they were blocked.\nThis also means adding a mechanism to unblock IPs after a certain amount of time.\nLuckily, I have threaded this so adding that is just a matter of adding another thread.\nI am open to ideas of what database to use.  I am thinking SQLite.\nOr, possibly just a file with the IPs (the rule) and the time they are to be unblocked (deleted \nfrom iptables).\n\n* * Add synchronized appender logging:\n      \nhttps://metacpan.org/dist/Log-Log4perl/view/lib/Log/Log4perl/Appender/Synchronized.pm\n\n* * Fix the ability for Log4perl to re-read the \"log4perl.conf\" which seems to not work right now\n\n* * Change from using log4perl to Log::Any\n\nI didn't know about Log::Any when I started this.  I am open to changing this to Log::Any but I need to \nfigure out how to do that.\n\n* * my $interfaces = Net::Ifconfig::Wrapper::Ifconfig('list', '', '', '');\n\nThis is a list of interfaces.  Need to figure out how to use this to get the IP address of the\ninterfaces.  Need to add those IPs to the global allow list.\n\n* * Fix sub add_ifconfig_ips_to_allowlist() to handle IPv4 and IPv6 addresses\n\nThis really findes the IPs on a network interface and adds them to the global allow list.\nUsually,we don't want to accidentally block our own IPs.\nOf course, this will mean adding an option to the configs file to turn this on or off.\n\n\n=head2 DESCRIPTION\n\nThis has been a very long running project of mine.  I have been using this script for years to block IPs and then \nrealized Fail2Ban exists.  I have tried to use Fail2Ban multiple times but it never seems to work right for me.\nIt seems to lock-up. \nThis module tries to incorporate the ideas of my past experience with the general idea of Fail2Ban.\n\nI highly encourage you to use a config file.  The default config file is in the same location as this module but you \ncan set it to another file.\n\nWhen installing this, you should also receive a script called \"ipBlocker.pl\".  This is a sample script that uses \nthis module.\n\nFinally, for now, this module use log4perl.  I didn't realize there was a heated debate about log4perl vs Log::Any vs \nwhatever else.  I am open to changing this to Log::Any but I need to figure out how to do that.\n\n=head1 SUBROUTINES/METHODS\n\n=head2 new\n\nReads configs form a file if exists otherwise uses defaults.\nSets up a class and returns a blessed \"object\".\nThe sub go() is where the action starts.\nThe sub new() just gets a few things setup.\n\nExample:\n\n  use IPblocker;\n\n  my $args = {\n    configsfile         => '/etc/ipblocker/ipblocker.conf',\n    dumpconfigsandexit  => '0', # True false value\n    forceremovelockfile => '0', # True false value\n    iptables            => 'sudo /sbin/iptables',\n    lockfile            => '/var/run/ipblocker.run',\n    log4perlconf        => '/etc/ipblocker/log4perl.conf',  #Can also be 0 to use default log4perl\n    loglevel            => 'DEBUG', # Can be TRACE DEBUG INFO WARN ERROR FATAL\n    prodmode            => '0', # True false value --- Determins if the iptables commands are actually run\n    queuechecktime      => '3', # How long to wait when the queue is empty before checking again. Any float value.\n    readentirefile      => '0', # True false value --- Determines if the entire log file is read or\n                                # new entries since last run are read.\n    cycles              => 'LONG_MAX', # How many times to run the main loop.  LONG_MAX is the default.\n    ### All configs can be set via a hash reference\n  };\n\n  my $ipb    = IPblocker->new($args);\n\n=head3 All arguments to new() and the defaults\n\n=head4 allowdeny\n\nallowdeny            => 'Allow,Deny',\n\nSet to 'Allow,Deny' or 'Deny,Allow' to determine the order of the allow and deny lists.\nSeteting to 'Allow,Deny' means the allow list is processed first and then the deny list is processed.\nMeaning, as an example, if 1.1.1.1 is on the allow list and allowdeny is set to Allow,Deny, then\nthe IP of 1.1.1.1 will never be blocked.  If allowdeny is set to Deny,Allow, then it is possible \nfor 1.1.1.1 to be blocked.\n\n=head4 allowlist\n\nallowlist            => {},\n\nA list of IPs to allow.  This is a hash reference.  The key is the order to allow the IP.  The value is the IP.\nExample:\n\n allowlist => (\n  '01' => '1.1.1.1',\n  '4' => '1.1.1.4',\n  '10' => '1.1.1.2',\n  '100' => '1.1.1.3',\n  \n )\n\nThe allow list is sorted in standard Perl sort order.  So, be sure to pad 0's or whatever to the front of the key.\n\n=head4 configsfile\n\nconfigsfile          => '/etc/ipblocker/ipblocker.conf',\n\nUse a config file!  This is the default config file location.  You can set it to another file.\n\n=head4 cycles\n\ncycles               => LONG_MAX,\n\nHow many times to run the main loop.  LONG_MAX is the default.  Why not infinity?  Because I don't want to.\n\n=head4 cyclesleep\n\ncyclesleep           => 0.5,\n\nHow long to sleep between cycles.  This is in seconds.  Default is 0.5 seconds.  You can use a float value.\n\n=head4 dumpconfigsandexit\n\ndumpconfigsandexit   => 0,\n\nIf set to 1 (true), then the configs are dumped to stdout and the script exits.  This is useful for creating a \nconfig file.\n\n=head4 denylist\n\ndenylist             => {},\n\nSimilar to allow list but for IPs to deny.  This is a hash reference.  The key is the order to deny the IP.\n\n=head4 forceremovelockfile\n\nforceremovelockfile  => 0,\n\nThis will force removal of lock file (if possible) before starting.  Seriously, you better know what you are doing.\n\n=head4 chainprefix\n\nchainprefix          => \"IPBLOCKER_\",\n\nThis is the prefix for the chains created in iptables.  This is the prefix you will see in iptables for \nall the chains created by this module.\n\n=head4 globalchains\n\nglobalchains         => [qw / INPUT OUTPUT FORWARD /],\n\nThis is a list of the global chains to add the global chain to.\nThe global chain is where all the subordinate file logger chains are added.\n\nI see some value in adding the global chain to some other chain but by default we add it to INPUT, OUTPUT, and FORWARD.\nOr, possibly, you don't want to add to the FORWARD chain.\nMaybe you onkly care about INPUT table.  I don't know.  Whatever works best for you.\n\n=head4 iptables\n\niptables             => '/sbin/iptables',\n\nThis is the iptables command to use.  You can use sudo or whatever you want.\nI really encourage using sudo but by default it is not used.  \nUsing sudo and non-root user is a bit more work.  You need to setup sudoers to allow the user to run iptables.\nHowever, I think it is worth it for an added measure of security.\nIf you change this to use sudo, then you may also need to change the lockfile location to a location that the user \ncan write to.\n\n=head4 lockfile\n\nlockfile             => '/var/run/ipblocker.run.default',\n\nThis is the lock file location to use to try to prevent multiple instances from running.\n\n=head4 log4perlconf\n\nlog4perlconf         => '/etc/ipblocker/log4perl.conf',\n\nThis is the log4perl configuration file to use.  You can also set this to 0 to use the default log4perl configuration.\n\n=head4 loglevel\n\nloglevel             => 'INFO'\n\nTHis can be TRACE DEBUG INFO WARN ERROR FATAL.\n\n=head4 prodmode\n\nprodmode          => 0,\n\nThis is a true/false value.  If set to 1 (true), then the iptables commands are actually run.  If set to 0 (false), \nthen the iptables commands are not run.  This is useful for testing.\n\nBy default, this is set to 0 (false).\n\n=head4 queuechecktime\n\nqueuechecktime    => 1,\n\nWhen the queue is empty, how long to wait before checking again.  When the queue is not empty, this value is ignored\n\n=head4 queuecycles\n\nqueuecycles       => LONG_MAX,\n\nHow many times to check the queue.  LONG_MAX is the default.  Why not infinity?  Because I don't want to.\n\n=head4 readentirefile\n\nreadentirefile    => 0,\n\nThis is a true/false value.  If set to 1 (true), then the entire log file is read.  If set to 0 (false), then only\nnew entries since the last run are read.\nThis can aslo be set per log file in the configs file.\n\n=head4 totalruntime\n\ntotalruntime      => LONG_MAX,\n\nHow long to run in seconds.  This is irrespective of any other cycle or queue cycle.  Nice for testing or maybe you\nwant to run this for a certain amount of time and restart it out of cron or something.\n\n\n# Description:  Creates a new class/object\n# Returns:      A blessed reference \"object\"\nsub new() {\n    my $class = shift;\n    my $args  = shift;\n\n    if ( !$args ) {\n        carp(\"No arguments passed to new().  This may not be an issue.\");\n        $args = {};\n    }\n    elsif ( ref($args) ne 'HASH' ) {\n        croak(\"Arguments passed to new() are not a hash reference\");\n    }\n\n    # Allow command line to override default configs file location\n    my $configsfile = $args->{configsfile} || $DEFAULTS->{configsfile};\n\n    my $self = {\n        configsfile => $configsfile,\n        clargs      => $args,\n    };\n\n    # Create the $self object\n    bless $self, $class;\n\n    # Load all the configs into the $self object under the configs key\n    # The sub load_configs() expects $self to be an object and have configsfile setup\n    $self->load_configs();\n\n    if ( $self->{configs}->{dumpconfigsandexit} ) {\n        ## Rip out some stuff that is used internally and not needed for the configs file\n        delete $self->{configs}->{configsfile};\n        delete $self->{configs}->{globalchain};\n        delete $self->{configs}->{dumpconfigsandexit};\n        print \"This can basically be copy/pasted into a config file:\\n\";\n        recursiveHashPrint( $self->{configs} );\n        exit;\n    } ## end if ( $self->{configs}->...)\n\n    # Setup logging.\n    # $logger = $self->setup_Logger();\n    $logger = $log;  #From Log::Any\n    $logger->info(\"Logging initialized and ready to go\");\n    $logger->debug( \"Dumping self: \" . Dumper($self) ) if ( $logger->is_debug() );\n\n    return $self;\n} ## end sub new\n\n# Description:  Recursively prints the configs in teh format of a config file\n# Returns:      Nothing\nsub recursiveHashPrint {\n    my ( $ref, $prefix ) = @_;\n    $prefix = '' unless defined $prefix;    # Initialize prefix if not provided\n\n    if ( ref($ref) eq 'HASH' ) {\n        foreach my $key ( sort keys %{$ref} ) {\n\n            # Concatenate the current key to the prefix for the next level\n            my $new_prefix = $prefix ? \"$prefix][$key\" : \"[$key\";\n            recursiveHashPrint( $ref->{$key}, $new_prefix );\n        } ## end foreach my $key ( sort keys...)\n    } ## end if ( ref($ref) eq 'HASH')\n    elsif ( ref($ref) eq 'ARRAY' ) {\n\n        # If the reference is an array, join and print the elements\n        my $line = \"$prefix] = \" . join( ', ', @{$ref} ) . \"\\n\";\n        $line =~ s/\\[//;\n        $line =~ s/\\]//;\n        print $line;\n    } ## end elsif ( ref($ref) eq 'ARRAY')\n    else {\n        # Print the scalar value\n        my $line = \"$prefix]=$ref\\n\";\n        $line =~ s/\\[//;\n        $line =~ s/\\]//;\n        print $line;\n    } ## end else [ if ( ref($ref) eq 'HASH')]\n} ## end sub recursiveHashPrint\n\n=head2 go\n\nThis is where the action starts.  This is called from the script that uses this module after\nnew() is instantiated.\n\nThis creates a thread for each log watcher and a thread for the iptables queue watcher.\nIf you have 5 files to watch, then there will be 5 threads watching those files + 1 thread to add commands to \niptables.\n\n Description:  Starts the module\n Requires:     $self\n Returns:      1 if able to stop gracefully, otherwise 0","label":"go()","parameters":[]},"children":[{"localvar":"my","name":"$self","containerName":"go","kind":13,"definition":"my","line":452},{"localvar":"my","containerName":"go","name":"$start_time","kind":13,"definition":"my","line":453},{"localvar":"my","name":"$TID","containerName":"go","kind":13,"definition":"my","line":454},{"line":454,"name":"tid","containerName":"go","kind":12},{"kind":13,"line":455,"containerName":"go","name":"$TID"},{"line":455,"containerName":"go","name":"$TID","kind":13},{"kind":13,"line":458,"containerName":"go","name":"$self"},{"kind":13,"name":"$logger","line":459,"containerName":"go"},{"containerName":"go","line":459,"name":"error","kind":12},{"kind":13,"line":464,"containerName":"go","name":"$self"},{"name":"set_iptables_command","line":464,"containerName":"go","kind":12},{"line":464,"name":"$logger","containerName":"go","kind":13},{"kind":12,"line":464,"containerName":"go","name":"error"},{"kind":13,"line":465,"name":"$self","containerName":"go"},{"line":465,"name":"set_signal_handler","containerName":"go","kind":12},{"line":466,"name":"$self","containerName":"go","kind":13},{"line":466,"name":"$self","containerName":"go","kind":13},{"kind":13,"line":467,"containerName":"go","name":"$self"},{"name":"set_lockFile","line":467,"containerName":"go","kind":12},{"containerName":"go","line":467,"name":"$logger","kind":13},{"name":"logdie","line":467,"containerName":"go","kind":12},{"line":472,"definition":"my","kind":13,"name":"$iptables_thr","containerName":"go","localvar":"my"},{"name":"create","line":472,"containerName":"go","kind":12},{"line":472,"containerName":"go","name":"$self","kind":13},{"kind":13,"containerName":"go","line":475,"name":"$self"},{"kind":12,"line":475,"name":"add_global_chain","containerName":"go"},{"kind":13,"line":478,"containerName":"go","name":"$self"},{"kind":12,"name":"add_global_allow_deny_ips","line":478,"containerName":"go"},{"kind":13,"line":481,"containerName":"go","name":"$logger"},{"line":481,"containerName":"go","name":"logdie","kind":12},{"line":481,"name":"$self","containerName":"go","kind":13},{"line":481,"containerName":"go","name":"logger_thread","kind":12},{"containerName":"go","name":"$totalruntime","localvar":"my","line":483,"definition":"my","kind":13},{"kind":13,"name":"$self","line":483,"containerName":"go"},{"kind":13,"line":484,"name":"$totalruntime","containerName":"go"},{"kind":13,"line":485,"name":"$totalruntime","containerName":"go"},{"line":487,"definition":"my","kind":13,"containerName":"go","name":"$logmsg","localvar":"my"},{"line":488,"containerName":"go","name":"$logmsg","kind":13},{"kind":13,"containerName":"go","line":488,"name":"$start_time"},{"kind":13,"line":489,"containerName":"go","name":"$logger"},{"line":489,"name":"debug","containerName":"go","kind":12},{"kind":13,"line":489,"name":"$logmsg","containerName":"go"},{"line":492,"definition":"my","kind":13,"name":"$runtime","containerName":"go","localvar":"my"},{"kind":13,"line":492,"name":"$start_time","containerName":"go"},{"kind":13,"line":493,"name":"$runtime","containerName":"go"},{"kind":13,"containerName":"go","line":493,"name":"$runtime"},{"line":494,"containerName":"go","name":"$logger","kind":13},{"kind":12,"line":494,"name":"info","containerName":"go"},{"line":495,"containerName":"go","name":"$logger","kind":13},{"name":"info","line":495,"containerName":"go","kind":12},{"name":"$args","containerName":"go","localvar":"my","line":496,"kind":13,"definition":"my"},{"kind":13,"name":"$tracker","line":497,"containerName":"go"},{"line":499,"name":"$self","containerName":"go","kind":13},{"line":499,"containerName":"go","name":"stop","kind":12},{"kind":13,"line":499,"name":"$args","containerName":"go"},{"kind":13,"containerName":"go","line":500,"name":"$logger"},{"kind":12,"line":500,"name":"error","containerName":"go"}],"line":451,"containerName":"Net::IPBlocker","name":"go"},{"kind":12,"line":454,"name":"threads"},{"kind":12,"name":"configs","line":458},{"kind":12,"name":"logs_to_review","line":458},{"name":"configs","line":466,"kind":12},{"name":"globalchain","line":466,"kind":12},{"kind":12,"name":"configs","line":466},{"kind":12,"line":466,"name":"chainprefix"},{"kind":12,"line":472,"name":"threads"},{"line":472,"name":"iptables_thread","kind":12},{"name":"configs","line":483,"kind":12},{"kind":12,"name":"totalruntime","line":483},{"kind":12,"name":"chains_created","line":497},{"line":497,"name":"chains_created","kind":12},{"signature":{"label":"iptables_thread()","parameters":[],"documentation":" Description:  Manages an iptables queue in a continuous loop, handling queue items, logging status, and pausing\n               based on configuration settings.\n Requires:     $self"},"line":507,"children":[{"line":508,"kind":13,"definition":"my","containerName":"iptables_thread","name":"$self","localvar":"my"},{"name":"$TID","containerName":"iptables_thread","localvar":"my","line":509,"definition":"my","kind":13},{"containerName":"iptables_thread","line":509,"name":"tid","kind":12},{"line":510,"name":"$TID","containerName":"iptables_thread","kind":13},{"kind":13,"line":510,"name":"$TID","containerName":"iptables_thread"},{"localvar":"my","containerName":"iptables_thread","name":"$cyclesleep","kind":13,"definition":"my","line":512},{"name":"$self","line":512,"containerName":"iptables_thread","kind":13},{"line":513,"definition":"my","kind":13,"name":"$cycles","containerName":"iptables_thread","localvar":"my"},{"kind":13,"line":513,"containerName":"iptables_thread","name":"$self"},{"localvar":"my","containerName":"iptables_thread","name":"$logmsg","definition":"my","kind":13,"line":514},{"line":515,"containerName":"iptables_thread","name":"$logmsg","kind":13},{"kind":13,"containerName":"iptables_thread","line":516,"name":"$logger"},{"line":516,"containerName":"iptables_thread","name":"info","kind":12},{"kind":13,"line":516,"name":"$logmsg","containerName":"iptables_thread"},{"localvar":"my","name":"$iptablesQueue_pending","containerName":"iptables_thread","kind":13,"definition":"my","line":519},{"kind":13,"name":"$IptablesQueue","line":519,"containerName":"iptables_thread"},{"kind":12,"containerName":"iptables_thread","line":519,"name":"pending"},{"kind":13,"line":520,"name":"$iptablesQueue_pending","containerName":"iptables_thread"},{"line":521,"kind":13,"definition":"my","name":"$logmsg","containerName":"iptables_thread","localvar":"my"},{"line":522,"name":"$logmsg","containerName":"iptables_thread","kind":13},{"line":523,"containerName":"iptables_thread","name":"$logger","kind":13},{"containerName":"iptables_thread","line":523,"name":"info","kind":12},{"containerName":"iptables_thread","line":523,"name":"$logmsg","kind":13},{"kind":13,"name":"$iptablesQueue_pending","line":527,"containerName":"iptables_thread"},{"kind":13,"containerName":"iptables_thread","line":528,"name":"$logger"},{"containerName":"iptables_thread","line":528,"name":"info","kind":12},{"localvar":"my","name":"$data","containerName":"iptables_thread","definition":"my","kind":13,"line":529},{"kind":13,"containerName":"iptables_thread","line":529,"name":"$IptablesQueue"},{"kind":12,"line":529,"containerName":"iptables_thread","name":"dequeue"},{"line":530,"containerName":"iptables_thread","name":"$logger","kind":13},{"line":530,"containerName":"iptables_thread","name":"debug","kind":12},{"kind":13,"line":530,"name":"$data","containerName":"iptables_thread"},{"kind":13,"line":530,"name":"$logger","containerName":"iptables_thread"},{"containerName":"iptables_thread","line":530,"name":"is_debug","kind":12},{"line":531,"name":"$self","containerName":"iptables_thread","kind":13},{"kind":12,"line":531,"name":"run_iptables","containerName":"iptables_thread"},{"containerName":"iptables_thread","line":531,"name":"$data","kind":13},{"kind":13,"containerName":"iptables_thread","line":531,"name":"$logger"},{"kind":12,"containerName":"iptables_thread","line":531,"name":"error"},{"line":531,"name":"$data","containerName":"iptables_thread","kind":13},{"kind":13,"line":532,"containerName":"iptables_thread","name":"$IPTABLESRUNLINE"},{"kind":13,"line":533,"name":"$IPTABLESRUNLINE","containerName":"iptables_thread"},{"line":533,"containerName":"iptables_thread","name":"$IPTABLESRUNLINE","kind":13},{"kind":13,"containerName":"iptables_thread","line":535,"name":"$iptablesQueue_pending"},{"line":538,"definition":"my","kind":13,"name":"$logmsg","containerName":"iptables_thread","localvar":"my"},{"line":539,"containerName":"iptables_thread","name":"$logmsg","kind":13},{"name":"$cyclesleep","line":539,"containerName":"iptables_thread","kind":13},{"kind":13,"containerName":"iptables_thread","line":540,"name":"$logmsg"},{"name":"$logger","line":541,"containerName":"iptables_thread","kind":13},{"kind":12,"containerName":"iptables_thread","line":541,"name":"info"},{"kind":13,"line":541,"containerName":"iptables_thread","name":"$logmsg"},{"kind":13,"containerName":"iptables_thread","line":542,"name":"$cyclesleep"},{"containerName":"iptables_thread","line":545,"name":"$logger","kind":13},{"kind":12,"containerName":"iptables_thread","line":545,"name":"error"}],"detail":"()","range":{"end":{"character":9999,"line":549},"start":{"character":0,"line":507}},"definition":"sub","kind":12,"containerName":"Net::IPBlocker","name":"iptables_thread"},{"line":509,"name":"threads","kind":12},{"kind":12,"line":512,"name":"configs"},{"kind":12,"name":"queuechecktime","line":512},{"kind":12,"name":"configs","line":513},{"kind":12,"name":"queuecycles","line":513},{"kind":12,"name":"Dumper","line":530},{"name":"Dumper","line":531,"kind":12},{"kind":12,"line":542,"name":"usleep"},{"containerName":"Net::IPBlocker","name":"add_ifconfig_ips_to_allowlist","kind":12,"detail":"()","definition":"sub","range":{"start":{"line":553,"character":0},"end":{"line":581,"character":9999}},"line":553,"children":[{"containerName":"add_ifconfig_ips_to_allowlist","name":"$self","localvar":"my","line":554,"definition":"my","kind":13}],"signature":{"documentation":" Description:  Adds IPs on the local interfaces to the global allowlist\n  This does not work because it only handles IPv4 addresses and other issues","label":"add_ifconfig_ips_to_allowlist()","parameters":[]}},{"containerName":"Net::IPBlocker","name":"set_lockFile","kind":12,"detail":"()","range":{"start":{"line":590,"character":0},"end":{"character":9999,"line":632}},"definition":"sub","line":590,"children":[{"kind":13,"definition":"my","line":591,"localvar":"my","containerName":"set_lockFile","name":"$self"},{"line":593,"name":"$self","containerName":"set_lockFile","kind":13},{"kind":13,"containerName":"set_lockFile","line":594,"name":"$logger"},{"containerName":"set_lockFile","line":594,"name":"logdie","kind":12},{"localvar":"my","name":"$lockfile","containerName":"set_lockFile","definition":"my","kind":13,"line":597},{"kind":13,"name":"$self","line":597,"containerName":"set_lockFile"},{"name":"$lf","containerName":"set_lockFile","localvar":"my","line":600,"kind":13,"definition":"my"},{"kind":13,"line":600,"containerName":"set_lockFile","name":"$self"},{"kind":13,"line":601,"containerName":"set_lockFile","name":"$logger"},{"containerName":"set_lockFile","line":601,"name":"debug","kind":12},{"line":603,"containerName":"set_lockFile","name":"$lf","kind":13},{"kind":13,"line":604,"containerName":"set_lockFile","name":"$self"},{"line":605,"name":"$logger","containerName":"set_lockFile","kind":13},{"name":"info","line":605,"containerName":"set_lockFile","kind":12},{"kind":13,"name":"$lf","line":606,"containerName":"set_lockFile"},{"line":606,"name":"$logger","containerName":"set_lockFile","kind":13},{"kind":12,"line":606,"name":"logdie","containerName":"set_lockFile"},{"containerName":"set_lockFile","name":"$fh","localvar":"my","line":609,"kind":13,"definition":"my"},{"kind":13,"name":"$lf","line":609,"containerName":"set_lockFile"},{"kind":13,"containerName":"set_lockFile","line":609,"name":"$logger"},{"containerName":"set_lockFile","line":609,"name":"logdie","kind":12},{"localvar":"my","containerName":"set_lockFile","name":"@contents","definition":"my","kind":13,"line":610},{"kind":13,"containerName":"set_lockFile","line":610,"name":"$fh"},{"name":"$fh","line":611,"containerName":"set_lockFile","kind":13},{"kind":13,"line":612,"name":"@contents","containerName":"set_lockFile"},{"line":613,"kind":13,"definition":"my","name":"$printable_contents","containerName":"set_lockFile","localvar":"my"},{"containerName":"set_lockFile","line":613,"name":"@contents","kind":13},{"definition":"my","kind":13,"line":614,"localvar":"my","containerName":"set_lockFile","name":"$logmsg"},{"name":"$logger","line":615,"containerName":"set_lockFile","kind":13},{"line":615,"containerName":"set_lockFile","name":"info","kind":12},{"line":615,"containerName":"set_lockFile","name":"$logmsg","kind":13},{"line":619,"containerName":"set_lockFile","name":"$lf","kind":13},{"kind":13,"containerName":"set_lockFile","line":619,"name":"$logger"},{"containerName":"set_lockFile","line":619,"name":"logdie","kind":12},{"containerName":"set_lockFile","line":622,"name":"$self","kind":13},{"kind":12,"line":622,"name":"make","containerName":"set_lockFile"},{"kind":13,"line":625,"containerName":"set_lockFile","name":"$logger"},{"line":625,"containerName":"set_lockFile","name":"debug","kind":12},{"kind":13,"line":625,"name":"$self","containerName":"set_lockFile"},{"containerName":"set_lockFile","line":625,"name":"$logger","kind":13},{"kind":12,"name":"is_debug","line":625,"containerName":"set_lockFile"},{"name":"$self","line":626,"containerName":"set_lockFile","kind":13},{"name":"$self","line":626,"containerName":"set_lockFile","kind":13},{"kind":12,"line":626,"name":"lock","containerName":"set_lockFile"},{"kind":13,"line":626,"containerName":"set_lockFile","name":"$lf"},{"name":"$logger","line":627,"containerName":"set_lockFile","kind":13},{"containerName":"set_lockFile","line":627,"name":"logdie","kind":12},{"kind":13,"line":628,"containerName":"set_lockFile","name":"$lock_obj"},{"kind":13,"containerName":"set_lockFile","line":628,"name":"$self"},{"kind":13,"line":630,"name":"$logger","containerName":"set_lockFile"},{"kind":12,"containerName":"set_lockFile","line":630,"name":"info"}],"signature":{"documentation":" Description:  Sets the lock file\n               This is very important to this module.  If the lock file is not set, then multiple instances of this\n               script can cause problems.\n               Some of this is on the user but I'll try my best to make it so duplicate instances of this script\n               can't run.\n Requires:     $self->{configs}->{lockfile}\n Returns:      1 if able to set lock file, otherwise logdie happens","parameters":[],"label":"set_lockFile()"}},{"kind":12,"line":593,"name":"configs"},{"kind":12,"line":593,"name":"lockfile"},{"kind":12,"line":597,"name":"configs"},{"kind":12,"name":"lockfile","line":597},{"name":"configs","line":600,"kind":12},{"line":600,"name":"lockfile","kind":12},{"kind":12,"line":604,"name":"configs"},{"line":604,"name":"forceremovelockfile","kind":12},{"name":"lockmgr","line":622,"kind":12},{"name":"LockFile","line":622,"containerName":"Simple","kind":12},{"line":625,"name":"Dumper","kind":12},{"name":"lockmgr","line":625,"kind":12},{"line":626,"name":"lock","kind":12},{"kind":12,"name":"lockmgr","line":626},{"kind":12,"line":628,"name":"lock"},{"containerName":"Net::IPBlocker","name":"logger_thread","children":[{"localvar":"my","containerName":"logger_thread","name":"$self","definition":"my","kind":13,"line":638},{"kind":13,"definition":"my","line":640,"localvar":"my","containerName":"logger_thread","name":"$logstoreview"},{"line":640,"containerName":"logger_thread","name":"$self","kind":13},{"kind":13,"line":641,"containerName":"logger_thread","name":"$logstoreview"},{"kind":13,"definition":"my","line":644,"localvar":"my","name":"$logtoreview","containerName":"logger_thread"},{"kind":13,"name":"$logstoreview","line":644,"containerName":"logger_thread"}],"line":637,"signature":{"documentation":" Description: Creates a thread for each log file to review\n Requires:    $self->{configs}->{logs_to_review}\n Returns:     1 or dies if thread can not be created","label":"logger_thread()","parameters":[]},"kind":12,"range":{"end":{"line":644,"character":9999},"start":{"character":0,"line":637}},"definition":"sub","detail":"()"},{"line":640,"name":"configs","kind":12},{"kind":12,"line":640,"name":"logs_to_review"},{"kind":13,"name":"$logger","line":645,"containerName":null},{"kind":12,"line":645,"name":"info","containerName":"Net::IPBlocker"},{"line":646,"kind":13,"definition":"my","containerName":null,"name":"$logobj","localvar":"my"},{"containerName":null,"line":646,"name":"%logstoreview","kind":13},{"kind":13,"name":"$logtoreview","line":646,"containerName":null},{"kind":13,"line":647,"containerName":null,"name":"%logobj"},{"line":647,"name":"chain","kind":12},{"kind":13,"containerName":null,"line":647,"name":"$logtoreview"},{"localvar":"my","name":"$thr","containerName":null,"definition":"my","kind":13,"line":649},{"kind":12,"line":649,"name":"threads"},{"kind":12,"line":649,"containerName":"Net::IPBlocker","name":"create"},{"kind":12,"name":"review_log","line":649},{"kind":13,"containerName":null,"line":649,"name":"$self"},{"kind":13,"containerName":null,"line":649,"name":"$logobj"},{"kind":13,"line":649,"name":"$logger","containerName":null},{"name":"logdie","line":649,"containerName":"Net::IPBlocker","kind":12},{"containerName":null,"line":650,"name":"$LoggerTIDS","kind":13},{"kind":13,"line":650,"containerName":null,"name":"$thr"},{"kind":12,"containerName":"Net::IPBlocker","line":650,"name":"tid"},{"kind":13,"name":"$logger","line":651,"containerName":null},{"name":"debug","line":651,"containerName":"Net::IPBlocker","kind":12},{"kind":13,"name":"$thr","line":651,"containerName":null},{"name":"tid","line":651,"containerName":"Net::IPBlocker","kind":12},{"name":"$logger","line":651,"containerName":null,"kind":13},{"containerName":"Net::IPBlocker","line":651,"name":"is_debug","kind":12},{"kind":13,"containerName":null,"line":652,"name":"$logger"},{"name":"debug","line":652,"containerName":"Net::IPBlocker","kind":12},{"name":"$thr","line":652,"containerName":null,"kind":13},{"containerName":"Net::IPBlocker","line":652,"name":"tid","kind":12},{"containerName":null,"line":652,"name":"$thr","kind":13},{"line":652,"containerName":"Net::IPBlocker","name":"is_running","kind":12},{"kind":13,"name":"$logger","line":652,"containerName":null},{"line":652,"containerName":"Net::IPBlocker","name":"is_debug","kind":12},{"containerName":"Net::IPBlocker","name":"prepare_directions","kind":12,"range":{"end":{"line":674,"character":9999},"start":{"character":0,"line":663}},"definition":"sub","detail":"()","children":[{"localvar":"my","containerName":"prepare_directions","name":"$self","kind":13,"definition":"my","line":664},{"kind":13,"containerName":"prepare_directions","line":664,"name":"$logobj"},{"containerName":"prepare_directions","name":"$TID","localvar":"my","line":665,"kind":13,"definition":"my"},{"containerName":"prepare_directions","line":665,"name":"tid","kind":12},{"line":666,"containerName":"prepare_directions","name":"$TID","kind":13},{"containerName":"prepare_directions","line":666,"name":"$TID","kind":13},{"kind":13,"definition":"my","line":668,"localvar":"my","containerName":"prepare_directions","name":"@directions"},{"line":668,"name":"$logobj","containerName":"prepare_directions","kind":13},{"kind":13,"line":668,"name":"$logobj","containerName":"prepare_directions"},{"line":669,"containerName":"prepare_directions","name":"@directions","kind":13},{"line":669,"name":"@directions","containerName":"prepare_directions","kind":13},{"name":"@directions","line":670,"containerName":"prepare_directions","kind":13},{"kind":13,"line":670,"containerName":"prepare_directions","name":"@directions"},{"line":671,"name":"@directions","containerName":"prepare_directions","kind":13},{"kind":13,"containerName":"prepare_directions","line":671,"name":"@directions"},{"kind":13,"name":"@directions","line":672,"containerName":"prepare_directions"},{"kind":13,"name":"@directions","line":672,"containerName":"prepare_directions"},{"containerName":"prepare_directions","line":673,"name":"@directions","kind":13}],"line":663,"signature":{"label":"prepare_directions()","parameters":[],"documentation":" Description:  Sets the direction of using source or destination for the iptables rules\n Requires:     $self, $logobj->{directions}\n Returns:      @directions"}},{"kind":12,"name":"threads","line":665},{"kind":12,"name":"directions","line":668},{"name":"directions","line":668,"kind":12},{"kind":12,"line":671,"name":"any"},{"detail":"()","definition":"sub","range":{"end":{"character":9999,"line":800},"start":{"character":0,"line":685}},"kind":12,"signature":{"label":"review_log()","parameters":[],"documentation":" Description:  Reads the log file and adds IPs to the iptables queue\n               This is called as a thread and runs a loop to check the log file for new entries\n               Prior to checking the log file, it creates a chain for the log file and adds it to the global chain\n Future:       This entire sub needs to be refactored.\n               It's easy to folllow but it is:\n                 a) just too many lines for one sub\n                 b) the for loops nesting is just too much\n Requires:     $self, $logobj\n Returns:      1"},"line":685,"children":[{"line":686,"kind":13,"definition":"my","containerName":"review_log","name":"$self","localvar":"my"},{"line":686,"name":"$logobj","containerName":"review_log","kind":13},{"line":687,"kind":13,"definition":"my","name":"$TID","containerName":"review_log","localvar":"my"},{"line":687,"name":"tid","containerName":"review_log","kind":12},{"line":688,"containerName":"review_log","name":"$TID","kind":13},{"kind":13,"containerName":"review_log","line":688,"name":"$TID"},{"localvar":"my","name":"$start_time","containerName":"review_log","kind":13,"definition":"my","line":689},{"containerName":"review_log","line":691,"name":"$logobj","kind":13},{"name":"$chain","containerName":"review_log","localvar":"my","line":692,"definition":"my","kind":13},{"line":692,"containerName":"review_log","name":"$self","kind":13},{"kind":13,"line":692,"name":"$logobj","containerName":"review_log"},{"kind":13,"line":693,"name":"$logger","containerName":"review_log"},{"kind":12,"line":693,"containerName":"review_log","name":"info"},{"kind":13,"containerName":"review_log","line":694,"name":"$logger"},{"name":"debug","line":694,"containerName":"review_log","kind":12},{"kind":13,"name":"$logobj","line":694,"containerName":"review_log"},{"containerName":"review_log","line":694,"name":"$logger","kind":13},{"line":694,"name":"is_debug","containerName":"review_log","kind":12},{"line":697,"kind":13,"definition":"my","name":"$cycles","containerName":"review_log","localvar":"my"},{"line":697,"containerName":"review_log","name":"$logobj","kind":13},{"name":"$cyclesleep","containerName":"review_log","localvar":"my","line":698,"definition":"my","kind":13},{"kind":13,"line":698,"containerName":"review_log","name":"$logobj"},{"definition":"my","kind":13,"line":699,"localvar":"my","containerName":"review_log","name":"$microcyclesleep"},{"containerName":"review_log","line":699,"name":"$cyclesleep","kind":13},{"containerName":"review_log","line":701,"name":"$logger","kind":13},{"kind":12,"line":701,"name":"info","containerName":"review_log"},{"kind":13,"line":706,"name":"$logger","containerName":"review_log"},{"containerName":"review_log","line":706,"name":"info","kind":12},{"name":"$self","line":707,"containerName":"review_log","kind":13},{"name":"add_chain","line":707,"containerName":"review_log","kind":12},{"line":707,"containerName":"review_log","name":"$chain","kind":13},{"containerName":"review_log","name":"$globalchain","localvar":"my","line":710,"kind":13,"definition":"my"},{"kind":13,"name":"$self","line":710,"containerName":"review_log"},{"containerName":"review_log","line":711,"name":"$logger","kind":13},{"containerName":"review_log","line":711,"name":"debug","kind":12},{"line":712,"name":"$self","containerName":"review_log","kind":13},{"kind":12,"containerName":"review_log","line":712,"name":"iptablesqueue_enqueue"},{"kind":13,"line":714,"name":"$self","containerName":"review_log"},{"kind":12,"line":714,"containerName":"review_log","name":"add_logger_allow_deny_ips"},{"name":"$logobj","line":714,"containerName":"review_log","kind":13},{"line":717,"kind":13,"definition":"my","containerName":"review_log","name":"@directions","localvar":"my"},{"line":717,"name":"$self","containerName":"review_log","kind":13},{"containerName":"review_log","line":717,"name":"prepare_directions","kind":12},{"line":717,"containerName":"review_log","name":"$logobj","kind":13},{"kind":13,"definition":"my","line":718,"localvar":"my","containerName":"review_log","name":"@protocols"},{"line":718,"containerName":"review_log","name":"$logobj","kind":13},{"kind":13,"line":718,"name":"$logobj","containerName":"review_log"},{"localvar":"my","containerName":"review_log","name":"$ports","kind":13,"definition":"my","line":719},{"line":719,"name":"$logobj","containerName":"review_log","kind":13},{"kind":13,"line":721,"containerName":"review_log","name":"$cycles"},{"name":"$start_loop_time","containerName":"review_log","localvar":"my","line":722,"definition":"my","kind":13},{"kind":13,"name":"$logger","line":723,"containerName":"review_log"},{"kind":12,"line":723,"containerName":"review_log","name":"info"},{"line":724,"name":"$logobj","containerName":"review_log","kind":13},{"kind":13,"name":"$self","line":724,"containerName":"review_log"},{"line":724,"containerName":"review_log","name":"readlogfile","kind":12},{"kind":13,"containerName":"review_log","line":724,"name":"$logobj"},{"kind":13,"line":725,"containerName":"review_log","name":"$logobj"},{"kind":13,"line":725,"name":"$self","containerName":"review_log"},{"line":725,"containerName":"review_log","name":"_grep_regexps","kind":12},{"kind":13,"name":"$logobj","line":725,"containerName":"review_log"},{"line":725,"containerName":"review_log","name":"$logobj","kind":13},{"line":729,"name":"$logger","containerName":"review_log","kind":13},{"kind":12,"name":"debug","line":729,"containerName":"review_log"},{"line":729,"containerName":"review_log","name":"$logobj","kind":13},{"kind":13,"line":730,"name":"$logger","containerName":"review_log"},{"containerName":"review_log","line":730,"name":"is_debug","kind":12},{"line":732,"definition":"my","kind":13,"containerName":"review_log","name":"@rules","localvar":"my"},{"kind":13,"definition":"my","line":733,"localvar":"my","name":"$ip","containerName":"review_log"},{"kind":13,"containerName":"review_log","line":733,"name":"$logobj"},{"line":734,"name":"$logger","containerName":"review_log","kind":13},{"kind":12,"containerName":"review_log","line":734,"name":"debug"},{"kind":13,"definition":"my","line":736,"localvar":"my","containerName":"review_log","name":"$direction"},{"line":736,"name":"@directions","containerName":"review_log","kind":13},{"name":"$direction_switch","containerName":"review_log","localvar":"my","line":737,"kind":13,"definition":"my"},{"kind":13,"line":737,"name":"$direction","containerName":"review_log"},{"line":738,"kind":13,"definition":"my","name":"$randval","containerName":"review_log","localvar":"my"},{"containerName":"review_log","line":739,"name":"$direction_switch","kind":13},{"line":739,"name":"$direction","containerName":"review_log","kind":13},{"containerName":"review_log","line":740,"name":"$logger","kind":13},{"containerName":"review_log","line":740,"name":"info","kind":12},{"kind":13,"definition":"my","line":741,"localvar":"my","name":"$base_rule","containerName":"review_log"},{"kind":13,"containerName":"review_log","line":742,"name":"$logger"},{"name":"debug","line":742,"containerName":"review_log","kind":12},{"line":744,"containerName":"review_log","name":"@protocols","kind":13},{"name":"$protocol","containerName":"review_log","localvar":"my","line":745,"definition":"my","kind":13},{"kind":13,"containerName":"review_log","line":745,"name":"@protocols"},{"localvar":"my","containerName":"review_log","name":"$rule","kind":13,"definition":"my","line":746},{"kind":13,"containerName":"review_log","line":746,"name":"$base_rule"},{"kind":13,"line":747,"containerName":"review_log","name":"$logger"},{"kind":12,"line":747,"name":"debug","containerName":"review_log"},{"kind":13,"name":"$logobj","line":748,"containerName":"review_log"},{"kind":13,"containerName":"review_log","line":752,"name":"$rule"},{"kind":13,"containerName":"review_log","line":754,"name":"$logger"},{"kind":12,"line":754,"containerName":"review_log","name":"debug"},{"line":755,"name":"@rules","containerName":"review_log","kind":13},{"kind":13,"line":759,"name":"$logger","containerName":"review_log"},{"kind":12,"line":759,"name":"debug","containerName":"review_log"},{"kind":13,"containerName":"review_log","line":760,"name":"@rules"},{"kind":13,"name":"$logger","line":765,"containerName":"review_log"},{"line":765,"name":"debug","containerName":"review_log","kind":12},{"kind":13,"name":"@rules","line":765,"containerName":"review_log"},{"containerName":"review_log","line":766,"name":"$logger","kind":13},{"kind":12,"line":766,"containerName":"review_log","name":"is_debug"},{"containerName":"review_log","name":"$eject","localvar":"my","line":767,"kind":13,"definition":"my"},{"containerName":"review_log","name":"$rule","localvar":"my","line":768,"definition":"my","kind":13},{"kind":13,"name":"@rules","line":768,"containerName":"review_log"},{"kind":13,"name":"$tracker","line":769,"containerName":"review_log"},{"name":"$logger","line":770,"containerName":"review_log","kind":13},{"containerName":"review_log","line":770,"name":"debug","kind":12},{"localvar":"my","containerName":"review_log","name":"$args","kind":13,"definition":"my","line":773},{"kind":13,"line":777,"containerName":"review_log","name":"$logger"},{"containerName":"review_log","line":777,"name":"debug","kind":12},{"kind":13,"containerName":"review_log","line":778,"name":"$tracker"},{"containerName":"review_log","line":781,"name":"$self","kind":13},{"kind":12,"containerName":"review_log","line":781,"name":"iptablesqueue_enqueue"},{"line":781,"containerName":"review_log","name":"$args","kind":13},{"kind":13,"containerName":"review_log","line":781,"name":"$eject"},{"name":"$logmsg","containerName":"review_log","localvar":"my","line":784,"definition":"my","kind":13},{"line":785,"containerName":"review_log","name":"$eject","kind":13},{"kind":13,"name":"$logger","line":785,"containerName":"review_log"},{"kind":12,"name":"info","line":785,"containerName":"review_log"},{"kind":13,"name":"$logmsg","line":785,"containerName":"review_log"},{"line":787,"name":"$logobj","containerName":"review_log","kind":13},{"line":791,"containerName":"review_log","name":"$self","kind":13},{"containerName":"review_log","line":791,"name":"iptablesqueue_enqueue","kind":12},{"name":"$timediff","containerName":"review_log","localvar":"my","line":793,"definition":"my","kind":13},{"kind":13,"containerName":"review_log","line":793,"name":"$start_loop_time"},{"line":794,"name":"$timediff","containerName":"review_log","kind":13},{"containerName":"review_log","line":794,"name":"$timediff","kind":13},{"kind":13,"line":795,"containerName":"review_log","name":"$logger"},{"name":"info","line":795,"containerName":"review_log","kind":12},{"containerName":"review_log","line":797,"name":"$cycles","kind":13},{"kind":13,"line":798,"name":"$logger","containerName":"review_log"},{"line":798,"containerName":"review_log","name":"info","kind":12},{"kind":13,"line":799,"containerName":"review_log","name":"$microcyclesleep"}],"name":"review_log","containerName":"Net::IPBlocker"},{"kind":12,"line":687,"name":"threads"},{"name":"configs","line":692,"kind":12},{"line":692,"name":"chainprefix","kind":12},{"line":692,"name":"chain","kind":12},{"name":"Dumper","line":694,"kind":12},{"kind":12,"name":"cycles","line":697},{"kind":12,"name":"LONG_MAX","line":697},{"kind":12,"name":"cyclesleep","line":698},{"line":710,"name":"configs","kind":12},{"line":710,"name":"globalchain","kind":12},{"kind":12,"name":"options","line":712},{"kind":12,"line":712,"name":"rule"},{"kind":12,"line":718,"name":"protocols"},{"name":"protocols","line":718,"kind":12},{"name":"ports","line":719,"kind":12},{"kind":12,"name":"ips_to_block","line":725},{"name":"logcontents","line":725,"kind":12},{"kind":12,"line":729,"name":"Dumper"},{"kind":12,"name":"ips_to_block","line":729},{"kind":12,"name":"ips_to_block","line":733},{"name":"ports","line":748,"kind":12},{"kind":12,"name":"Dumper","line":765},{"line":769,"name":"iptables_rules","kind":12},{"name":"options","line":774,"kind":12},{"kind":12,"line":775,"name":"rule"},{"name":"iptables_rules","line":778,"kind":12},{"kind":12,"name":"ips_to_block","line":787},{"kind":12,"line":791,"name":"check_pending"},{"line":799,"name":"usleep","kind":12},{"localvar":"my","name":"$runtime","containerName":null,"kind":13,"definition":"my","line":802},{"kind":13,"line":802,"containerName":null,"name":"$start_time"},{"kind":13,"line":803,"name":"$runtime","containerName":null},{"kind":13,"line":803,"containerName":null,"name":"$runtime"},{"definition":"my","kind":13,"line":804,"localvar":"my","containerName":null,"name":"$cycles_completed"},{"line":804,"containerName":null,"name":"%logobj","kind":13},{"kind":12,"line":804,"name":"cycles"},{"containerName":null,"line":804,"name":"$cycles","kind":13},{"containerName":null,"name":"$logmsg","localvar":"my","line":805,"definition":"my","kind":13},{"kind":13,"line":806,"containerName":null,"name":"$logmsg"},{"name":"$logger","line":807,"containerName":null,"kind":13},{"line":807,"containerName":"Net::IPBlocker","name":"info","kind":12},{"kind":13,"containerName":null,"line":807,"name":"$logmsg"},{"containerName":"Net::IPBlocker","name":"load_configs","line":815,"children":[{"name":"$self","containerName":"load_configs","localvar":"my","line":816,"definition":"my","kind":13},{"definition":"my","kind":13,"line":817,"localvar":"my","containerName":"load_configs","name":"$configsfile"},{"kind":13,"name":"$self","line":817,"containerName":"load_configs"},{"line":818,"kind":13,"definition":"my","containerName":"load_configs","name":"$clargs","localvar":"my"},{"line":818,"containerName":"load_configs","name":"$self","kind":13},{"containerName":"load_configs","line":820,"name":"$configsfile","kind":13},{"kind":13,"line":822,"name":"$self","containerName":"load_configs"},{"kind":13,"containerName":"load_configs","line":822,"name":"$self"},{"containerName":"load_configs","line":823,"name":"$self","kind":13},{"name":"$self","line":823,"containerName":"load_configs","kind":13},{"kind":13,"line":824,"containerName":"load_configs","name":"$self"},{"line":827,"kind":13,"definition":"my","name":"$msg","containerName":"load_configs","localvar":"my"},{"line":828,"name":"$msg","containerName":"load_configs","kind":13},{"line":829,"name":"$msg","containerName":"load_configs","kind":13},{"kind":13,"containerName":"load_configs","line":829,"name":"$clargs"},{"kind":13,"containerName":"load_configs","line":830,"name":"$msg"},{"name":"$DEFAULTS","line":830,"containerName":"load_configs","kind":13},{"kind":13,"line":831,"name":"$msg","containerName":"load_configs"},{"line":832,"containerName":"load_configs","name":"$msg","kind":13},{"line":833,"name":"$msg","containerName":"load_configs","kind":13},{"localvar":"my","containerName":"load_configs","name":"$config","kind":13,"definition":"my","line":836},{"kind":13,"line":836,"name":"$DEFAULTS","containerName":"load_configs"}],"kind":12,"range":{"start":{"character":0,"line":815},"end":{"line":836,"character":9999}},"definition":"sub"},{"kind":12,"name":"configsfile","line":817},{"name":"clargs","line":818,"kind":12},{"kind":12,"name":"configs","line":822},{"kind":12,"line":822,"containerName":"File::read_config_file","name":"Config"},{"kind":12,"line":822,"name":"configsfile"},{"kind":12,"line":823,"name":"configs"},{"name":"globalchain","line":823,"kind":12},{"kind":12,"name":"configs","line":823},{"name":"globalchain","line":823,"kind":12},{"line":824,"name":"configs","kind":12},{"line":824,"name":"globalchain","kind":12},{"kind":12,"line":829,"name":"Dumper"},{"kind":12,"line":830,"name":"Dumper"},{"line":832,"name":"carp","kind":12},{"line":839,"name":"%self","containerName":null,"kind":13},{"name":"configs","line":839,"kind":12},{"name":"$config","line":839,"containerName":null,"kind":13},{"kind":13,"line":840,"containerName":null,"name":"%clargs"},{"kind":13,"line":840,"name":"$config","containerName":null},{"kind":13,"line":841,"name":"%clargs","containerName":null},{"name":"$config","line":841,"containerName":null,"kind":13},{"line":842,"name":"%self","containerName":null,"kind":13},{"line":842,"name":"configs","kind":12},{"line":842,"name":"$config","containerName":null,"kind":13},{"kind":13,"containerName":null,"line":842,"name":"%DEFAULTS"},{"kind":13,"line":842,"name":"$config","containerName":null},{"kind":13,"line":845,"containerName":null,"name":"%self"},{"kind":12,"line":845,"name":"configs"},{"range":{"start":{"line":958,"character":0},"end":{"line":1060,"character":9999}},"definition":"sub","detail":"()","kind":12,"signature":{"label":"run_iptables()","parameters":[],"documentation":" Special helper function for clean_ips_to_block()\n Description:  A helper function for clean_ips_to_block_allowdeny()\n Returns:      A hash reference of IPs\n sub reverseMapHash() {\n     my $self = shift;\n     my $hash = shift;\n     my $new_hash = {};\n     foreach my $key ( sort keys %{$hash} ) {\n         $new_hash->{ $hash->{$key} }++;\n     }\n     return $new_hash;\n } ## end sub reverseMapHash\n Description: Returns the logobj with ips_to_block set with the IPs to block from the allow/deny lists\n   There is a lot of logging available in this sub.\n   This sub is called from review_log()\n sub clean_ips_to_block_allowdeny() {\n     my $self   = shift;\n     my $logobj = shift;\n     my $TID    = threads->tid;\n     $TID = \"TID: \" . $TID;\n     local $Data::Dumper::Terse  = 1;    # Disable use of $VARn\n     local $Data::Dumper::Indent = 0;    # Disable indentation\n     # $logger->debug(\"Reviewing log object: \" . Dumper($logobj)) if ( $logger->is_debug() );\n     my $allowdeny        = $logobj->{allowdeny}          ||= $self->{configs}->{allowdeny} ||= \"\";\n     my $logobj_allowlist = $logobj->{allowlist}          ||= $self->{configs}->{allowlist} ||= {};\n     my $logobj_denylist  = $logobj->{denylist}           ||= $self->{configs}->{denylist}  ||= {};\n     my $global_denylist  = $self->{configs}->{denylist}  ||= {};\n     my $global_allowlist = $self->{configs}->{allowlist} ||= {};\n     my $ips_to_block = $logobj->{ips_to_block} ||= {};\n     # Due to the configs module, need to reverse map the allowlists and denylists\n     $logobj_allowlist = $self->reverseMapHash($logobj_allowlist);\n     $logobj_denylist  = $self->reverseMapHash($logobj_denylist);\n     $global_allowlist = $self->reverseMapHash($global_allowlist);\n     $global_denylist  = $self->reverseMapHash($global_denylist);\n     # Some logging info:\n     $logger->info(\"$TID|Allow/Deny: $allowdeny\");\n     $logger->debug( \"$TID|Logobj allowlist: \" . Dumper($logobj_allowlist) ) if ( $logger->is_debug() );\n     $logger->debug( \"$TID|Logobj denylist: \" . Dumper($logobj_denylist) )   if ( $logger->is_debug() );\n     $logger->debug( \"$TID|Logobj ips_to_block: \" . Dumper($ips_to_block) )  if ( $logger->is_debug() );\n     $logger->debug( \"$TID|Global allowlist: \" . Dumper($global_allowlist) ) if ( $logger->is_debug() );\n     $logger->debug( \"$TID|Global denylist: \" . Dumper($global_denylist) )   if ( $logger->is_debug() );\n     # Combine global and logobj allowlist and denylist\n     my $allowlist = { %{$global_allowlist}, %{$logobj_allowlist} };\n     my $denylist  = { %{$global_denylist},  %{$logobj_denylist} };\n     # More logging info:\n     $logger->debug( \"$TID|Combined allowlist: \" . Dumper($allowlist) ) if ( $logger->is_debug() );\n     $logger->debug( \"$TID|Combined denylist: \" . Dumper($denylist) )   if ( $logger->is_debug() );\n     # Combine denylist with ips_to_block\n     $denylist = { %{$denylist}, %{$ips_to_block} };\n     # More logging info:\n     $logger->debug( \"$TID|Combined denylist with ips_to_block: \" . Dumper($denylist) ) if ( $logger->is_debug() );\n     # This is the meat of the function....\n     ## If we Deny first then then no need to remove IPs from the denylist\n     if ( $allowdeny eq 'Deny,Allow' ) {\n         $logobj->{ips_to_block} = $denylist;\n         $logger->debug( \"$TID|Returning logobj with ips_to_block of: \" . Dumper( $logobj->{ips_to_block} ) )\n           if ( $logger->is_debug() );\n         return $logobj;\n     } ## end if ( $allowdeny eq 'Deny,Allow')\n     ## If we Allow first then we need to remove IPs from the denylist\n     ## The map below removes allowlist from denylist\n     ## The || (or) is used to prevent undef errors\n     map { delete $denylist->{$_} || $_ } keys %{$allowlist};\n     $logobj->{ips_to_block} = $denylist;\n     $logger->debug( \"$TID|Returning logobj with ips_to_block of: \" . Dumper( $logobj->{ips_to_block} ) )\n       if ( $logger->is_debug() );\n     return $logobj;\n } ## end sub clean_ips_to_block_allowdeny\n Runs whatever parameters are passed to it against iptables\n  This is intended to be a one stop shop for running iptables out from a queue.\n  However, there are a few instances where it is called directly... especially when creating chains\n   This hopefully prevents excessive wait/locking on iptables\n   and helps to keep commands running in the order they are received.\n Arguments must be passed as a hash reference with (so far) the following keys:\n   rule:  The rule to run\n   options:  Any options to pass to iptables\n  Where it is ran like this:\n   iptables $options $rule 2>&1\n Future enhancement:\n   1. delete existing rule if it exists\n Take note this sub is intended (but not required) to be called from sub iptables_thread()\n  An error will happen if not called from sub iptables_thread(), but it will not stop the program\n  This is to encourage using the iptablesqueue_enqueue() sub instead of run_iptables() directly\n  So, to say this more clearly, if you want to run iptables commands, then call iptablesqueue_enqueue()\n Description:  Runs iptables commands.  This is intended to be a one stop shop for running iptables out from a queue.\n               However, there are a few instances where it is called directly... especially when creating chains\n               This hopefully prevents excessive wait/locking on iptables and helps to keep commands running in the\n               order they are received.\n               If the calling sub is not sub iptables_thread, then an error is thrown but the program continues.\n               This is to encourage using the iptablesqueue_enqueue() sub instead of run_iptables() directly.\n Arguments:    $self, $args (hash reference)\n               $args->{rule} (string) - The rule to run\n               $args->{options} (string) - Any options to pass to iptables (like -N or -A)\n Returns:      1 if successful, otherwise 0"},"children":[{"containerName":"run_iptables","name":"$self","localvar":"my","line":959,"definition":"my","kind":13},{"line":959,"containerName":"run_iptables","name":"$args","kind":13},{"name":"@caller_lst","containerName":"run_iptables","localvar":"my","line":960,"definition":"my","kind":13},{"kind":13,"containerName":"run_iptables","line":961,"name":"$caller_lst"},{"containerName":"run_iptables","line":961,"name":"$IPTABLESRUNLINE","kind":13},{"kind":13,"line":961,"containerName":"run_iptables","name":"$IPTABLESRUNLINE"},{"line":962,"kind":13,"definition":"my","containerName":"run_iptables","name":"$logmsg","localvar":"my"},{"kind":13,"line":965,"name":"@caller_lst","containerName":"run_iptables"},{"name":"$logger","line":970,"containerName":"run_iptables","kind":13},{"line":970,"containerName":"run_iptables","name":"error","kind":12},{"kind":13,"name":"$logmsg","line":970,"containerName":"run_iptables"},{"localvar":"my","containerName":"run_iptables","name":"$TID","kind":13,"definition":"my","line":972},{"kind":12,"line":972,"name":"tid","containerName":"run_iptables"},{"line":973,"name":"$TID","containerName":"run_iptables","kind":13},{"kind":13,"line":973,"containerName":"run_iptables","name":"$TID"},{"kind":13,"name":"$args","line":976,"containerName":"run_iptables"},{"line":976,"containerName":"run_iptables","name":"$logger","kind":13},{"kind":12,"line":976,"name":"error","containerName":"run_iptables"},{"line":977,"name":"$self","containerName":"run_iptables","kind":13},{"kind":13,"name":"$logger","line":977,"containerName":"run_iptables"},{"kind":12,"name":"error","line":977,"containerName":"run_iptables"},{"definition":"my","kind":13,"line":979,"localvar":"my","name":"$iptables","containerName":"run_iptables"},{"kind":13,"line":979,"name":"$self","containerName":"run_iptables"},{"name":"$rule","containerName":"run_iptables","localvar":"my","line":980,"kind":13,"definition":"my"},{"kind":13,"containerName":"run_iptables","line":980,"name":"$args"},{"localvar":"my","containerName":"run_iptables","name":"$options","definition":"my","kind":13,"line":981},{"name":"$args","line":981,"containerName":"run_iptables","kind":13},{"containerName":"run_iptables","line":983,"name":"$logger","kind":13},{"line":983,"name":"is_debug","containerName":"run_iptables","kind":12},{"kind":13,"containerName":"run_iptables","line":984,"name":"$logger"},{"name":"debug","line":984,"containerName":"run_iptables","kind":12},{"line":985,"containerName":"run_iptables","name":"$args","kind":13},{"kind":13,"line":993,"containerName":"run_iptables","name":"$args"},{"kind":13,"definition":"my","line":994,"localvar":"my","containerName":"run_iptables","name":"$allowdupes"},{"name":"$args","line":994,"containerName":"run_iptables","kind":13},{"kind":13,"containerName":"run_iptables","line":996,"name":"$allowdupes"},{"kind":13,"line":997,"name":"$logger","containerName":"run_iptables"},{"kind":12,"name":"debug","line":997,"containerName":"run_iptables"},{"name":"$retval","containerName":"run_iptables","localvar":"my","line":998,"kind":13,"definition":"my"},{"line":998,"containerName":"run_iptables","name":"$self","kind":13},{"name":"check_if_rule_exists","line":998,"containerName":"run_iptables","kind":12},{"containerName":"run_iptables","line":998,"name":"$args","kind":13},{"kind":13,"containerName":"run_iptables","line":999,"name":"$retval"},{"containerName":"run_iptables","name":"$logmsg","localvar":"my","line":1000,"kind":13,"definition":"my"},{"containerName":"run_iptables","line":1001,"name":"$logmsg","kind":13},{"kind":13,"line":1002,"name":"$logger","containerName":"run_iptables"},{"kind":12,"line":1002,"containerName":"run_iptables","name":"debug"},{"line":1002,"name":"$logmsg","containerName":"run_iptables","kind":13},{"line":1004,"containerName":"run_iptables","name":"$tracker","kind":13},{"kind":13,"line":1004,"name":"$rule","containerName":"run_iptables"},{"line":1007,"name":"$retval","containerName":"run_iptables","kind":13},{"containerName":"run_iptables","line":1011,"name":"$logger","kind":13},{"kind":12,"name":"debug","line":1011,"containerName":"run_iptables"},{"kind":13,"containerName":"run_iptables","line":1013,"name":"$tracker"},{"containerName":"run_iptables","line":1013,"name":"$rule","kind":13},{"kind":13,"line":1016,"containerName":"run_iptables","name":"$retval"},{"kind":13,"name":"$logger","line":1017,"containerName":"run_iptables"},{"line":1017,"name":"debug","containerName":"run_iptables","kind":12},{"line":1019,"containerName":"run_iptables","name":"$retval","kind":13},{"containerName":"run_iptables","line":1020,"name":"$options","kind":13},{"name":"$logger","line":1023,"containerName":"run_iptables","kind":13},{"kind":12,"name":"debug","line":1023,"containerName":"run_iptables"},{"kind":13,"line":1026,"containerName":"run_iptables","name":"$tracker"},{"kind":13,"line":1026,"name":"$rule","containerName":"run_iptables"},{"kind":13,"containerName":"run_iptables","line":1028,"name":"$retval"},{"containerName":"run_iptables","line":1029,"name":"$logger","kind":13},{"kind":12,"name":"error","line":1029,"containerName":"run_iptables"},{"name":"$retval","line":1032,"containerName":"run_iptables","kind":13},{"kind":13,"definition":"my","line":1033,"localvar":"my","name":"$logmsg","containerName":"run_iptables"},{"line":1034,"containerName":"run_iptables","name":"$logmsg","kind":13},{"name":"$logger","line":1035,"containerName":"run_iptables","kind":13},{"kind":12,"line":1035,"containerName":"run_iptables","name":"error"},{"kind":13,"name":"$logmsg","line":1035,"containerName":"run_iptables"},{"kind":13,"line":1039,"containerName":"run_iptables","name":"$logger"},{"name":"error","line":1039,"containerName":"run_iptables","kind":12},{"line":1039,"containerName":"run_iptables","name":"$retval","kind":13},{"definition":"my","kind":13,"line":1044,"localvar":"my","containerName":"run_iptables","name":"$command"},{"line":1045,"containerName":"run_iptables","name":"$tracker","kind":13},{"containerName":"run_iptables","line":1045,"name":"$rule","kind":13},{"line":1046,"containerName":"run_iptables","name":"$self","kind":13},{"kind":13,"name":"$logger","line":1047,"containerName":"run_iptables"},{"kind":12,"line":1047,"containerName":"run_iptables","name":"debug"},{"containerName":"run_iptables","name":"$output","localvar":"my","line":1048,"kind":13,"definition":"my"},{"kind":13,"line":1049,"containerName":"run_iptables","name":"$logger"},{"kind":12,"name":"debug","line":1049,"containerName":"run_iptables"},{"line":1053,"containerName":"run_iptables","name":"$logger","kind":13},{"kind":12,"name":"info","line":1053,"containerName":"run_iptables"},{"name":"$logger","line":1058,"containerName":"run_iptables","kind":13},{"kind":12,"line":1058,"containerName":"run_iptables","name":"error"}],"line":958,"containerName":"Net::IPBlocker","name":"run_iptables"},{"name":"Dumper","line":965,"kind":12},{"kind":12,"line":972,"name":"threads"},{"line":976,"name":"rule","kind":12},{"kind":12,"name":"configs","line":977},{"kind":12,"name":"iptables","line":977},{"line":979,"name":"configs","kind":12},{"kind":12,"name":"iptables","line":979},{"line":980,"name":"rule","kind":12},{"kind":12,"line":981,"name":"options"},{"kind":12,"name":"Dumper","line":985},{"line":993,"name":"allowdupes","kind":12},{"kind":12,"name":"allowdupes","line":994},{"line":1004,"name":"iptables_rules","kind":12},{"name":"iptables_rules","line":1013,"kind":12},{"line":1026,"name":"chains_created","kind":12},{"kind":12,"name":"iptables_rules","line":1045},{"name":"configs","line":1046,"kind":12},{"kind":12,"name":"PRODMODE","line":1046},{"line":1065,"children":[{"name":"$self","containerName":"set_iptables_command","localvar":"my","line":1066,"kind":13,"definition":"my"},{"kind":13,"line":1069,"name":"$self","containerName":"set_iptables_command"},{"kind":13,"line":1070,"containerName":"set_iptables_command","name":"$self"},{"name":"$logger","line":1071,"containerName":"set_iptables_command","kind":13},{"kind":12,"containerName":"set_iptables_command","line":1071,"name":"info"}],"signature":{"documentation":" Description:  Finds the iptables command to use\n Returns:      1 always","label":"set_iptables_command()","parameters":[]},"kind":12,"detail":"()","range":{"end":{"character":9999,"line":1073},"start":{"line":1065,"character":0}},"definition":"sub","containerName":"Net::IPBlocker","name":"set_iptables_command"},{"kind":12,"line":1069,"name":"configs"},{"kind":12,"name":"iptables","line":1069},{"name":"configs","line":1070,"kind":12},{"kind":12,"name":"iptables","line":1070},{"name":"check_if_rule_exists","containerName":"Net::IPBlocker","range":{"start":{"character":0,"line":1078},"end":{"character":9999,"line":1133}},"definition":"sub","detail":"($self,$args)","kind":12,"signature":{"label":"check_if_rule_exists($self,$args)","parameters":[{"label":"$self"},{"label":"$args"}],"documentation":" Description:  Checks if a command already exists in the iptables queue or in the tracker config\n               This is used to prevent duplicate rules from being added to the iptables queue\n Returns:      Multiple scalar strings returns with specific meanings.  See code for details"},"children":[{"definition":"my","kind":13,"line":1079,"localvar":"my","name":"$self","containerName":"check_if_rule_exists"},{"line":1079,"name":"$args","containerName":"check_if_rule_exists","kind":13},{"localvar":"my","name":"$TID","containerName":"check_if_rule_exists","definition":"my","kind":13,"line":1080},{"name":"tid","line":1080,"containerName":"check_if_rule_exists","kind":12},{"line":1081,"containerName":"check_if_rule_exists","name":"$TID","kind":13},{"kind":13,"name":"$TID","line":1081,"containerName":"check_if_rule_exists"},{"line":1084,"name":"$args","containerName":"check_if_rule_exists","kind":13},{"kind":13,"containerName":"check_if_rule_exists","line":1084,"name":"$self"},{"name":"log_and_return","line":1084,"containerName":"check_if_rule_exists","kind":12},{"kind":13,"containerName":"check_if_rule_exists","line":1085,"name":"$self"},{"line":1085,"containerName":"check_if_rule_exists","name":"$logger","kind":13},{"containerName":"check_if_rule_exists","line":1085,"name":"error","kind":12},{"localvar":"my","name":"$iptables","containerName":"check_if_rule_exists","kind":13,"definition":"my","line":1087},{"name":"$self","line":1087,"containerName":"check_if_rule_exists","kind":13},{"containerName":"check_if_rule_exists","name":"$rule","localvar":"my","line":1088,"kind":13,"definition":"my"},{"line":1088,"name":"$args","containerName":"check_if_rule_exists","kind":13},{"containerName":"check_if_rule_exists","name":"$options","localvar":"my","line":1089,"kind":13,"definition":"my"},{"line":1089,"containerName":"check_if_rule_exists","name":"$args","kind":13},{"line":1091,"containerName":"check_if_rule_exists","name":"$tracker","kind":13},{"kind":13,"line":1091,"containerName":"check_if_rule_exists","name":"$rule"},{"line":1092,"containerName":"check_if_rule_exists","name":"$logger","kind":13},{"kind":12,"containerName":"check_if_rule_exists","line":1092,"name":"debug"},{"name":"$tracker","line":1096,"containerName":"check_if_rule_exists","kind":13},{"kind":13,"name":"$rule","line":1096,"containerName":"check_if_rule_exists"},{"containerName":"check_if_rule_exists","line":1097,"name":"$logger","kind":13},{"kind":12,"line":1097,"name":"debug","containerName":"check_if_rule_exists"},{"kind":13,"line":1101,"containerName":"check_if_rule_exists","name":"$options"},{"name":"$logmsg","containerName":"check_if_rule_exists","localvar":"my","line":1102,"definition":"my","kind":13},{"kind":13,"line":1103,"name":"$logmsg","containerName":"check_if_rule_exists"},{"line":1104,"name":"$logger","containerName":"check_if_rule_exists","kind":13},{"line":1104,"name":"debug","containerName":"check_if_rule_exists","kind":12},{"line":1104,"containerName":"check_if_rule_exists","name":"$logmsg","kind":13},{"name":"$checkrule_result","containerName":"check_if_rule_exists","localvar":"my","line":1108,"definition":"my","kind":13},{"line":1110,"containerName":"check_if_rule_exists","name":"$logger","kind":13},{"kind":12,"line":1110,"containerName":"check_if_rule_exists","name":"debug"},{"line":1114,"name":"$checkrule_result","containerName":"check_if_rule_exists","kind":13},{"kind":13,"line":1115,"containerName":"check_if_rule_exists","name":"$logger"},{"line":1115,"containerName":"check_if_rule_exists","name":"debug","kind":12},{"kind":13,"line":1116,"containerName":"check_if_rule_exists","name":"$logger"},{"kind":12,"name":"debug","line":1116,"containerName":"check_if_rule_exists"},{"kind":13,"line":1120,"name":"$checkrule_result","containerName":"check_if_rule_exists"},{"line":1121,"containerName":"check_if_rule_exists","name":"$logger","kind":13},{"line":1121,"name":"debug","containerName":"check_if_rule_exists","kind":12},{"name":"$logger","line":1122,"containerName":"check_if_rule_exists","kind":13},{"name":"debug","line":1122,"containerName":"check_if_rule_exists","kind":12},{"line":1126,"containerName":"check_if_rule_exists","name":"$checkrule_result","kind":13},{"name":"$logger","line":1127,"containerName":"check_if_rule_exists","kind":13},{"line":1127,"name":"debug","containerName":"check_if_rule_exists","kind":12},{"containerName":"check_if_rule_exists","line":1128,"name":"$logger","kind":13},{"line":1128,"name":"debug","containerName":"check_if_rule_exists","kind":12},{"kind":13,"name":"$self","line":1132,"containerName":"check_if_rule_exists"},{"containerName":"check_if_rule_exists","line":1132,"name":"log_and_return","kind":12}],"line":1078},{"kind":12,"line":1080,"name":"threads"},{"kind":12,"name":"rule","line":1084},{"kind":12,"name":"configs","line":1085},{"kind":12,"line":1085,"name":"iptables"},{"kind":12,"name":"configs","line":1087},{"kind":12,"line":1087,"name":"iptables"},{"kind":12,"name":"rule","line":1088},{"name":"options","line":1089,"kind":12},{"name":"chains_created","line":1091,"kind":12},{"name":"iptables_rules","line":1096,"kind":12},{"signature":{"label":"log_and_return($self,$error_message)","parameters":[{"label":"$self"},{"label":"$error_message"}],"documentation":" Description:  A stupid helper function to log and return a message\n Returns:      1 always"},"line":1137,"children":[{"kind":13,"definition":"my","line":1138,"localvar":"my","containerName":"log_and_return","name":"$self"},{"line":1138,"containerName":"log_and_return","name":"$error_message","kind":13},{"definition":"my","kind":13,"line":1139,"localvar":"my","name":"$TID","containerName":"log_and_return"},{"line":1139,"name":"tid","containerName":"log_and_return","kind":12},{"line":1140,"name":"$TID","containerName":"log_and_return","kind":13},{"line":1140,"containerName":"log_and_return","name":"$TID","kind":13},{"line":1141,"name":"$logger","containerName":"log_and_return","kind":13},{"kind":12,"name":"error","line":1141,"containerName":"log_and_return"},{"line":1141,"containerName":"log_and_return","name":"$error_message","kind":13}],"detail":"($self,$error_message)","range":{"start":{"character":0,"line":1137},"end":{"character":9999,"line":1143}},"definition":"sub","kind":12,"containerName":"Net::IPBlocker","name":"log_and_return"},{"name":"threads","line":1139,"kind":12},{"containerName":"Net::IPBlocker","name":"add_global_chain","range":{"end":{"character":9999,"line":1178},"start":{"line":1150,"character":0}},"definition":"sub","detail":"()","kind":12,"signature":{"documentation":" Description:  Creates the global chain and then adds jump rule(s) to the global chain.\n               With default values this means creating the global chain \"IPBLOCKER_global\" and then\n               adding a jump rule to the INPUT, OUTPUT, and FORWARD tables to go to IPBLOCKER_global\n               Actually, this enqueue's the commands via the iptablesqueue_enqueue() sub\n Returns:      1 if able to enqueue commands otherwise 0","label":"add_global_chain()","parameters":[]},"children":[{"line":1151,"kind":13,"definition":"my","containerName":"add_global_chain","name":"$self","localvar":"my"},{"containerName":"add_global_chain","name":"$TID","localvar":"my","line":1152,"definition":"my","kind":13},{"kind":12,"line":1152,"name":"tid","containerName":"add_global_chain"},{"kind":13,"containerName":"add_global_chain","line":1153,"name":"$TID"},{"name":"$TID","line":1153,"containerName":"add_global_chain","kind":13},{"kind":13,"definition":"my","line":1155,"localvar":"my","containerName":"add_global_chain","name":"$chain"},{"line":1155,"name":"$self","containerName":"add_global_chain","kind":13},{"line":1155,"name":"$logger","containerName":"add_global_chain","kind":13},{"kind":12,"containerName":"add_global_chain","line":1155,"name":"logdie"},{"containerName":"add_global_chain","line":1156,"name":"$chain","kind":13},{"kind":13,"containerName":"add_global_chain","line":1156,"name":"$chain"},{"definition":"my","kind":13,"line":1158,"localvar":"my","name":"$globalchains_str","containerName":"add_global_chain"},{"kind":13,"name":"$self","line":1158,"containerName":"add_global_chain"},{"line":1158,"containerName":"add_global_chain","name":"$logger","kind":13},{"name":"logdie","line":1158,"containerName":"add_global_chain","kind":12},{"definition":"my","kind":13,"line":1159,"localvar":"my","name":"@globalchains","containerName":"add_global_chain"},{"line":1159,"containerName":"add_global_chain","name":"$globalchains_str","kind":13},{"kind":13,"line":1161,"name":"$logger","containerName":"add_global_chain"},{"kind":12,"line":1161,"name":"info","containerName":"add_global_chain"},{"name":"$args","containerName":"add_global_chain","localvar":"my","line":1162,"kind":13,"definition":"my"},{"line":1166,"containerName":"add_global_chain","name":"$self","kind":13},{"containerName":"add_global_chain","line":1166,"name":"iptablesqueue_enqueue","kind":12},{"kind":13,"line":1166,"name":"$args","containerName":"add_global_chain"},{"line":1168,"name":"$logger","containerName":"add_global_chain","kind":13},{"name":"info","line":1168,"containerName":"add_global_chain","kind":12},{"name":"$table","containerName":"add_global_chain","localvar":"my","line":1169,"kind":13,"definition":"my"},{"kind":13,"name":"@globalchains","line":1169,"containerName":"add_global_chain"},{"line":1170,"definition":"my","kind":13,"containerName":"add_global_chain","name":"$args","localvar":"my"},{"kind":13,"containerName":"add_global_chain","line":1174,"name":"$self"},{"kind":12,"line":1174,"containerName":"add_global_chain","name":"iptablesqueue_enqueue"},{"line":1174,"name":"$args","containerName":"add_global_chain","kind":13}],"line":1150},{"name":"threads","line":1152,"kind":12},{"line":1155,"name":"configs","kind":12},{"name":"chainprefix","line":1155,"kind":12},{"name":"configs","line":1158,"kind":12},{"line":1158,"name":"globalchains","kind":12},{"line":1163,"name":"options","kind":12},{"line":1164,"name":"rule","kind":12},{"name":"options","line":1171,"kind":12},{"kind":12,"line":1172,"name":"rule"},{"definition":"sub","range":{"start":{"character":0,"line":1183},"end":{"line":1199,"character":9999}},"detail":"()","kind":12,"signature":{"label":"iptablesqueue_enqueue()","parameters":[],"documentation":" Description: Queues items onto the iptables queue\n Returns 1 if queue is allowing enqueuing\n Returns 0 if queue is not allowing enqueuing"},"children":[{"line":1184,"definition":"my","kind":13,"name":"$self","containerName":"iptablesqueue_enqueue","localvar":"my"},{"line":1184,"containerName":"iptablesqueue_enqueue","name":"$args","kind":13},{"kind":13,"definition":"my","line":1185,"localvar":"my","name":"$TID","containerName":"iptablesqueue_enqueue"},{"name":"tid","line":1185,"containerName":"iptablesqueue_enqueue","kind":12},{"kind":13,"containerName":"iptablesqueue_enqueue","line":1186,"name":"$TID"},{"name":"$TID","line":1186,"containerName":"iptablesqueue_enqueue","kind":13},{"localvar":"my","containerName":"iptablesqueue_enqueue","name":"$iptablesQueue_pending","kind":13,"definition":"my","line":1188},{"kind":13,"containerName":"iptablesqueue_enqueue","line":1188,"name":"$IptablesQueue"},{"line":1188,"name":"pending","containerName":"iptablesqueue_enqueue","kind":12},{"line":1189,"containerName":"iptablesqueue_enqueue","name":"$iptablesQueue_pending","kind":13},{"name":"$logmsg","containerName":"iptablesqueue_enqueue","localvar":"my","line":1190,"kind":13,"definition":"my"},{"kind":13,"line":1191,"containerName":"iptablesqueue_enqueue","name":"$logmsg"},{"line":1192,"containerName":"iptablesqueue_enqueue","name":"$logger","kind":13},{"kind":12,"line":1192,"name":"info","containerName":"iptablesqueue_enqueue"},{"kind":13,"line":1192,"containerName":"iptablesqueue_enqueue","name":"$logmsg"},{"kind":13,"line":1195,"containerName":"iptablesqueue_enqueue","name":"$args"},{"containerName":"iptablesqueue_enqueue","line":1196,"name":"$logger","kind":13},{"kind":12,"name":"debug","line":1196,"containerName":"iptablesqueue_enqueue"},{"containerName":"iptablesqueue_enqueue","line":1196,"name":"$args","kind":13},{"name":"$logger","line":1196,"containerName":"iptablesqueue_enqueue","kind":13},{"kind":12,"line":1196,"name":"is_debug","containerName":"iptablesqueue_enqueue"},{"kind":13,"containerName":"iptablesqueue_enqueue","line":1197,"name":"$IptablesQueue"},{"kind":12,"line":1197,"name":"enqueue","containerName":"iptablesqueue_enqueue"},{"containerName":"iptablesqueue_enqueue","line":1197,"name":"$args","kind":13}],"line":1183,"name":"iptablesqueue_enqueue","containerName":"Net::IPBlocker"},{"line":1185,"name":"threads","kind":12},{"kind":12,"name":"check_pending","line":1195},{"kind":12,"line":1196,"name":"Dumper"},{"definition":"sub","range":{"end":{"line":1255,"character":9999},"start":{"character":0,"line":1210}},"detail":"($self,$logobj)","kind":12,"signature":{"label":"readlogfile($self,$logobj)","parameters":[{"label":"$self"},{"label":"$logobj"}],"documentation":" This function reads the log file into memory from the seek position (if it exists)\n The reading of a log file based on the seek position creates a big issue if the log file is rotated AND is larger than\n   the seek position\n   This is a tradeoff of reading the entire log file into memory and then grepping for the regexps\n Returns: $logobj\n Description:  Reads the log file into memory based on whether or not the readentirefile flag is set\n Requires:     $self, $logobj\n Returns:      $logobj with the logcontents set"},"children":[{"localvar":"my","containerName":"readlogfile","name":"$self","kind":13,"definition":"my","line":1211},{"kind":13,"line":1211,"name":"$logobj","containerName":"readlogfile"},{"name":"$TID","containerName":"readlogfile","localvar":"my","line":1212,"kind":13,"definition":"my"},{"kind":12,"line":1212,"containerName":"readlogfile","name":"tid"},{"name":"$TID","line":1213,"containerName":"readlogfile","kind":13},{"kind":13,"name":"$TID","line":1213,"containerName":"readlogfile"},{"line":1216,"definition":"my","kind":13,"containerName":"readlogfile","name":"$file","localvar":"my"},{"line":1216,"containerName":"readlogfile","name":"$logobj","kind":13},{"kind":13,"line":1217,"containerName":"readlogfile","name":"$file"},{"kind":13,"line":1217,"containerName":"readlogfile","name":"$logger"},{"kind":12,"containerName":"readlogfile","line":1217,"name":"error"},{"line":1217,"name":"$logobj","containerName":"readlogfile","kind":13},{"line":1220,"name":"$logobj","containerName":"readlogfile","kind":13},{"line":1221,"name":"$logobj","containerName":"readlogfile","kind":13},{"containerName":"readlogfile","line":1221,"name":"$file","kind":13},{"kind":13,"containerName":"readlogfile","line":1221,"name":"$logobj"},{"line":1222,"name":"$logobj","containerName":"readlogfile","kind":13},{"containerName":"readlogfile","line":1222,"name":"$self","kind":13},{"kind":13,"name":"$logobj","line":1223,"containerName":"readlogfile"},{"line":1223,"containerName":"readlogfile","name":"$logobj","kind":13},{"containerName":"readlogfile","line":1225,"name":"$logger","kind":13},{"kind":12,"containerName":"readlogfile","line":1225,"name":"debug"},{"localvar":"my","containerName":"readlogfile","name":"$fh","definition":"my","kind":13,"line":1231},{"kind":13,"containerName":"readlogfile","line":1231,"name":"$file"},{"kind":13,"name":"$logger","line":1232,"containerName":"readlogfile"},{"name":"error","line":1232,"containerName":"readlogfile","kind":12},{"kind":13,"name":"$logobj","line":1233,"containerName":"readlogfile"},{"line":1235,"name":"$fh","containerName":"readlogfile","kind":13},{"containerName":"readlogfile","line":1235,"name":"$logobj","kind":13},{"definition":"my","kind":13,"line":1236,"localvar":"my","containerName":"readlogfile","name":"@logcontents"},{"containerName":"readlogfile","line":1236,"name":"$fh","kind":13},{"containerName":"readlogfile","line":1237,"name":"$logobj","kind":13},{"kind":13,"containerName":"readlogfile","line":1237,"name":"$fh"},{"line":1238,"containerName":"readlogfile","name":"$fh","kind":13},{"kind":13,"line":1240,"containerName":"readlogfile","name":"@logcontents"},{"line":1241,"name":"$logger","containerName":"readlogfile","kind":13},{"kind":12,"line":1241,"containerName":"readlogfile","name":"debug"},{"line":1241,"containerName":"readlogfile","name":"@logcontents","kind":13},{"kind":13,"containerName":"readlogfile","line":1244,"name":"$logger"},{"line":1244,"containerName":"readlogfile","name":"info","kind":12},{"kind":13,"containerName":"readlogfile","line":1245,"name":"$logobj"},{"containerName":"readlogfile","line":1248,"name":"@logcontents","kind":13},{"line":1249,"name":"$logobj","containerName":"readlogfile","kind":13},{"line":1249,"name":"@logcontents","containerName":"readlogfile","kind":13},{"kind":13,"line":1251,"containerName":"readlogfile","name":"$logger"},{"kind":12,"containerName":"readlogfile","line":1251,"name":"debug"},{"kind":13,"line":1251,"containerName":"readlogfile","name":"@logcontents"},{"line":1252,"name":"$logger","containerName":"readlogfile","kind":13},{"containerName":"readlogfile","line":1252,"name":"trace","kind":12},{"containerName":"readlogfile","line":1252,"name":"$logobj","kind":13},{"kind":13,"containerName":"readlogfile","line":1252,"name":"$logger"},{"kind":12,"line":1252,"name":"is_trace","containerName":"readlogfile"},{"containerName":"readlogfile","line":1254,"name":"$logobj","kind":13}],"line":1210,"name":"readlogfile","containerName":"Net::IPBlocker"},{"name":"threads","line":1212,"kind":12},{"name":"file","line":1216,"kind":12},{"name":"seek","line":1220,"kind":12},{"name":"seek","line":1221,"kind":12},{"name":"seek","line":1221,"kind":12},{"kind":12,"line":1222,"name":"readentirefile"},{"kind":12,"line":1222,"name":"configs"},{"name":"readentirefile","line":1222,"kind":12},{"line":1223,"name":"seek","kind":12},{"name":"readentirefile","line":1223,"kind":12},{"kind":12,"name":"seek","line":1235},{"kind":12,"line":1237,"name":"seek"},{"kind":12,"line":1245,"name":"logcontents"},{"line":1249,"name":"logcontents","kind":12},{"kind":12,"name":"Dumper","line":1252},{"kind":12,"name":"logcontents","line":1252},{"containerName":"Net::IPBlocker","name":"_grep_regexps","signature":{"documentation":" Description:  Using the logobj, this greps against the log contents for matching lines and then gets the\n               IP address on each line.\n Requires:     $self, $log\n Returns:      Hash reference of IP addresses with count of how many times the IP address was found","parameters":[{"label":"$self"},{"label":"$log"}],"label":"_grep_regexps($self,$log)"},"children":[{"localvar":"my","name":"$self","containerName":"_grep_regexps","kind":13,"definition":"my","line":1262},{"containerName":"_grep_regexps","line":1262,"name":"$log","kind":13},{"localvar":"my","containerName":"_grep_regexps","name":"$TID","kind":13,"definition":"my","line":1263},{"kind":12,"line":1263,"name":"tid","containerName":"_grep_regexps"},{"localvar":"my","containerName":"_grep_regexps","name":"$matches","kind":13,"definition":"my","line":1265},{"kind":13,"definition":"my","line":1266,"localvar":"my","containerName":"_grep_regexps","name":"@log_contents"},{"line":1266,"containerName":"_grep_regexps","name":"$log","kind":13}],"line":1261,"definition":"sub","range":{"end":{"line":1266,"character":9999},"start":{"line":1261,"character":0}},"detail":"($self,$log)","kind":12},{"kind":12,"line":1263,"name":"threads"},{"kind":12,"line":1266,"name":"logcontents"},{"kind":13,"line":1268,"containerName":null,"name":"@log_contents"},{"line":1271,"kind":13,"definition":"my","name":"$regex","containerName":null,"localvar":"my"},{"kind":13,"name":"%log","line":1271,"containerName":null},{"name":"regexpdeny","line":1271,"kind":12},{"localvar":"my","containerName":null,"name":"$pattern","kind":13,"definition":"my","line":1272},{"name":"%log","line":1272,"containerName":null,"kind":13},{"line":1272,"name":"regexpdeny","kind":12},{"kind":13,"name":"$regex","line":1272,"containerName":null},{"kind":13,"name":"$logger","line":1273,"containerName":null},{"kind":12,"line":1273,"name":"debug","containerName":"Net::IPBlocker"},{"localvar":"my","containerName":null,"name":"@current_matches","definition":"my","kind":13,"line":1275},{"name":"@log_contents","line":1275,"containerName":null,"kind":13},{"kind":13,"line":1276,"containerName":null,"name":"$logger"},{"line":1276,"containerName":"Net::IPBlocker","name":"debug","kind":12},{"kind":12,"name":"Dumper","line":1276},{"line":1276,"name":"@current_matches","containerName":null,"kind":13},{"kind":13,"name":"$logger","line":1276,"containerName":null},{"containerName":"Net::IPBlocker","line":1276,"name":"is_debug","kind":12},{"line":1278,"kind":13,"definition":"my","containerName":null,"name":"$line","localvar":"my"},{"name":"@current_matches","line":1278,"containerName":null,"kind":13},{"kind":13,"line":1279,"containerName":null,"name":"$line"},{"kind":13,"line":1280,"name":"$logger","containerName":null},{"name":"debug","line":1280,"containerName":"Net::IPBlocker","kind":12},{"line":1282,"kind":13,"definition":"my","containerName":null,"name":"$ip_address","localvar":"my"},{"kind":13,"name":"$line","line":1282,"containerName":null},{"kind":13,"containerName":null,"line":1282,"name":"%line"},{"name":"%matches","line":1283,"containerName":null,"kind":13},{"kind":13,"name":"$ip_address","line":1283,"containerName":null},{"line":1284,"containerName":null,"name":"$logger","kind":13},{"name":"debug","line":1284,"containerName":"Net::IPBlocker","kind":12},{"name":"$logger","line":1289,"containerName":null,"kind":13},{"containerName":"Net::IPBlocker","line":1289,"name":"debug","kind":12},{"kind":12,"name":"Dumper","line":1289},{"kind":13,"containerName":null,"line":1289,"name":"$matches"},{"containerName":null,"line":1289,"name":"$logger","kind":13},{"name":"is_debug","line":1289,"containerName":"Net::IPBlocker","kind":12},{"line":1291,"definition":"my","kind":13,"name":"$log_msg","containerName":null,"localvar":"my"},{"line":1292,"name":"$log_msg","containerName":null,"kind":13},{"kind":13,"containerName":null,"line":1292,"name":"$matches"},{"kind":13,"line":1293,"containerName":null,"name":"$logger"},{"line":1293,"name":"info","containerName":"Net::IPBlocker","kind":12},{"kind":13,"line":1293,"name":"$log_msg","containerName":null},{"kind":13,"containerName":null,"line":1295,"name":"$matches"},{"range":{"start":{"line":1301,"character":0},"end":{"character":9999,"line":1312}},"definition":"sub","detail":"()","kind":12,"signature":{"documentation":" Description:  Adds a chain to iptables\n               Also adds the chain to $tracker\n Returns:      1 if able to enqueue commands otherwise 0","parameters":[],"label":"add_chain()"},"children":[{"definition":"my","kind":13,"line":1302,"localvar":"my","containerName":"add_chain","name":"$self"},{"kind":13,"name":"$chain","line":1302,"containerName":"add_chain"},{"kind":13,"definition":"my","line":1303,"localvar":"my","containerName":"add_chain","name":"$TID"},{"kind":12,"name":"tid","line":1303,"containerName":"add_chain"},{"kind":13,"containerName":"add_chain","line":1305,"name":"$logger"},{"kind":12,"name":"info","line":1305,"containerName":"add_chain"},{"line":1306,"definition":"my","kind":13,"containerName":"add_chain","name":"$rule","localvar":"my"},{"line":1307,"definition":"my","kind":13,"name":"$options","containerName":"add_chain","localvar":"my"},{"line":1308,"definition":"my","kind":13,"name":"$args","containerName":"add_chain","localvar":"my"},{"kind":13,"name":"$rule","line":1308,"containerName":"add_chain"},{"name":"$options","line":1308,"containerName":"add_chain","kind":13},{"containerName":"add_chain","line":1309,"name":"$self","kind":13},{"line":1309,"name":"iptablesqueue_enqueue","containerName":"add_chain","kind":12},{"containerName":"add_chain","line":1309,"name":"$args","kind":13},{"kind":13,"name":"$tracker","line":1310,"containerName":"add_chain"},{"name":"$chain","line":1310,"containerName":"add_chain","kind":13}],"line":1301,"containerName":"Net::IPBlocker","name":"add_chain"},{"name":"threads","line":1303,"kind":12},{"kind":12,"line":1308,"name":"rule"},{"line":1308,"name":"options","kind":12},{"name":"chains_created","line":1310,"kind":12},{"containerName":"Net::IPBlocker","name":"add_allowdeny_ips","definition":"sub","range":{"start":{"line":1323,"character":0},"end":{"line":1361,"character":9999}},"detail":"()","kind":12,"signature":{"documentation":" Description:  Adds IPs as DROP or ACCEPT to the chain provided\n Requires:     $self\n               $args to be a hash reference with the following optional keys:\n                   chain:  The chain to add the rules to.  If no chain provided then the\n                           default is ipblocker_global\n                   allowlist:  An array of IPs to allow\n                   denylist:  An array of IPs to deny\n                   allowdenyorder:  The order to add the allow and deny rules\n Returns:      1 if able to enqueue commands otherwise 0","parameters":[],"label":"add_allowdeny_ips()"},"children":[{"localvar":"my","name":"$self","containerName":"add_allowdeny_ips","definition":"my","kind":13,"line":1324},{"kind":13,"line":1324,"containerName":"add_allowdeny_ips","name":"$args"},{"definition":"my","kind":13,"line":1325,"localvar":"my","name":"$TID","containerName":"add_allowdeny_ips"},{"line":1325,"containerName":"add_allowdeny_ips","name":"tid","kind":12},{"containerName":"add_allowdeny_ips","line":1327,"name":"$args","kind":13},{"kind":13,"line":1328,"containerName":"add_allowdeny_ips","name":"$logger"},{"kind":12,"name":"error","line":1328,"containerName":"add_allowdeny_ips"},{"localvar":"my","name":"$chain","containerName":"add_allowdeny_ips","kind":13,"definition":"my","line":1331},{"kind":13,"containerName":"add_allowdeny_ips","line":1331,"name":"$args"},{"line":1333,"definition":"my","kind":13,"name":"%ip_rules","containerName":"add_allowdeny_ips","localvar":"my"},{"line":1334,"containerName":"add_allowdeny_ips","name":"$args","kind":13},{"kind":13,"containerName":"add_allowdeny_ips","line":1335,"name":"$args"},{"line":1338,"kind":13,"definition":"my","name":"@allowdenyorder","containerName":"add_allowdeny_ips","localvar":"my"},{"kind":13,"line":1339,"name":"$args","containerName":"add_allowdeny_ips"},{"line":1340,"name":"@allowdenyorder","containerName":"add_allowdeny_ips","kind":13},{"line":1343,"containerName":"add_allowdeny_ips","name":"$logger","kind":13},{"containerName":"add_allowdeny_ips","line":1343,"name":"debug","kind":12},{"line":1343,"name":"%ip_rules","containerName":"add_allowdeny_ips","kind":13},{"kind":13,"line":1343,"name":"$logger","containerName":"add_allowdeny_ips"},{"line":1343,"containerName":"add_allowdeny_ips","name":"is_debug","kind":12},{"line":1346,"kind":13,"definition":"my","name":"$action","containerName":"add_allowdeny_ips","localvar":"my"},{"line":1346,"containerName":"add_allowdeny_ips","name":"@allowdenyorder","kind":13},{"kind":13,"containerName":"add_allowdeny_ips","line":1347,"name":"$logger"},{"line":1347,"containerName":"add_allowdeny_ips","name":"debug","kind":12},{"kind":13,"definition":"my","line":1350,"localvar":"my","name":"$chain","containerName":"add_allowdeny_ips"},{"name":"$args","line":1350,"containerName":"add_allowdeny_ips","kind":13},{"localvar":"my","name":"$rule_action","containerName":"add_allowdeny_ips","definition":"my","kind":13,"line":1351},{"kind":13,"line":1351,"containerName":"add_allowdeny_ips","name":"$action"},{"localvar":"my","name":"$ip","containerName":"add_allowdeny_ips","definition":"my","kind":13,"line":1352},{"line":1352,"name":"$ip_rules","containerName":"add_allowdeny_ips","kind":13},{"line":1352,"containerName":"add_allowdeny_ips","name":"$action","kind":13},{"line":1353,"containerName":"add_allowdeny_ips","name":"$logger","kind":13},{"kind":12,"name":"debug","line":1353,"containerName":"add_allowdeny_ips"},{"name":"$direction","containerName":"add_allowdeny_ips","localvar":"my","line":1354,"definition":"my","kind":13},{"localvar":"my","containerName":"add_allowdeny_ips","name":"$rule","definition":"my","kind":13,"line":1355},{"name":"$args","containerName":"add_allowdeny_ips","localvar":"my","line":1356,"definition":"my","kind":13},{"containerName":"add_allowdeny_ips","line":1356,"name":"$rule","kind":13},{"kind":13,"line":1357,"name":"$logger","containerName":"add_allowdeny_ips"},{"kind":12,"line":1357,"name":"debug","containerName":"add_allowdeny_ips"},{"containerName":"add_allowdeny_ips","line":1358,"name":"$self","kind":13},{"line":1358,"name":"iptablesqueue_enqueue","containerName":"add_allowdeny_ips","kind":12},{"line":1358,"name":"$args","containerName":"add_allowdeny_ips","kind":13}],"line":1323},{"name":"threads","line":1325,"kind":12},{"kind":12,"name":"chain","line":1331},{"line":1334,"name":"allow","kind":12},{"kind":12,"name":"allowlist","line":1334},{"name":"deny","line":1335,"kind":12},{"kind":12,"name":"denylist","line":1335},{"line":1339,"name":"allowdeny","kind":12},{"kind":12,"name":"Dumper","line":1343},{"name":"chain","line":1350,"kind":12},{"kind":12,"line":1356,"name":"rule"},{"kind":12,"name":"options","line":1356},{"containerName":"Net::IPBlocker","name":"add_global_allow_deny_ips","signature":{"documentation":" Description:  Adds the IPs to block or accept from the configs global allowlist and global denylist\n               to the global chain\n Requires:     $self->{configs}->{allowlist} to be a hash reference\n               $self->{configs}->{denylist} to be a hash reference\n Returns:      Returns the value returned by add_allowdeny_ips()","label":"add_global_allow_deny_ips()","parameters":[]},"children":[{"line":1372,"definition":"my","kind":13,"name":"$self","containerName":"add_global_allow_deny_ips","localvar":"my"},{"definition":"my","kind":13,"line":1373,"localvar":"my","name":"$TID","containerName":"add_global_allow_deny_ips"},{"kind":12,"line":1373,"name":"tid","containerName":"add_global_allow_deny_ips"},{"name":"$logger","line":1375,"containerName":"add_global_allow_deny_ips","kind":13},{"containerName":"add_global_allow_deny_ips","line":1375,"name":"debug","kind":12},{"containerName":"add_global_allow_deny_ips","name":"$chain","localvar":"my","line":1376,"kind":13,"definition":"my"},{"kind":13,"line":1376,"containerName":"add_global_allow_deny_ips","name":"$self"},{"containerName":"add_global_allow_deny_ips","name":"@allowlist","localvar":"my","line":1377,"kind":13,"definition":"my"},{"kind":13,"line":1377,"containerName":"add_global_allow_deny_ips","name":"$self"},{"kind":13,"line":1377,"containerName":"add_global_allow_deny_ips","name":"$self"}],"line":1371,"definition":"sub","range":{"start":{"line":1371,"character":0},"end":{"character":9999,"line":1377}},"detail":"()","kind":12},{"kind":12,"name":"threads","line":1373},{"line":1376,"name":"configs","kind":12},{"kind":12,"line":1376,"name":"chainprefix"},{"name":"configs","line":1377,"kind":12},{"line":1377,"name":"allowlist","kind":12},{"kind":12,"name":"configs","line":1377},{"kind":12,"line":1377,"name":"allowlist"},{"line":1378,"definition":"my","kind":13,"containerName":null,"name":"@denylist","localvar":"my"},{"kind":13,"line":1378,"containerName":null,"name":"%self"},{"kind":12,"line":1378,"name":"configs"},{"kind":12,"name":"denylist","line":1378},{"line":1378,"name":"%self","containerName":null,"kind":13},{"kind":12,"name":"configs","line":1378},{"line":1378,"name":"denylist","kind":12},{"containerName":null,"name":"$allowdeny","localvar":"my","line":1379,"definition":"my","kind":13},{"name":"%self","line":1379,"containerName":null,"kind":13},{"kind":12,"name":"configs","line":1379},{"kind":12,"line":1379,"name":"allowdeny"},{"localvar":"my","name":"%args","containerName":null,"definition":"my","kind":13,"line":1381},{"line":1382,"name":"chain","kind":12},{"containerName":null,"line":1382,"name":"$chain","kind":13},{"name":"allowlist","line":1383,"kind":12},{"line":1383,"name":"@allowlist","containerName":null,"kind":13},{"name":"denylist","line":1384,"kind":12},{"containerName":null,"line":1384,"name":"@denylist","kind":13},{"name":"allowdeny","line":1385,"kind":12},{"kind":13,"containerName":null,"line":1386,"name":"$allowdeny"},{"kind":13,"containerName":null,"line":1388,"name":"$logger"},{"line":1388,"containerName":"Net::IPBlocker","name":"debug","kind":12},{"kind":12,"line":1388,"name":"Dumper"},{"kind":13,"containerName":null,"line":1388,"name":"$args"},{"kind":13,"line":1388,"containerName":null,"name":"$logger"},{"kind":12,"line":1388,"name":"is_debug","containerName":"Net::IPBlocker"},{"kind":13,"containerName":null,"line":1390,"name":"$self"},{"containerName":"Net::IPBlocker","line":1390,"name":"add_allowdeny_ips","kind":12},{"line":1390,"containerName":null,"name":"$args","kind":13},{"signature":{"label":"add_logger_allow_deny_ips()","parameters":[],"documentation":" Description:  Adds the IPs to block or accept from the logobj allowlist and logobj denylist\n Requires:     $logobj->{allowlist} to be a hash reference\n               $logobj->{denylist} to be a hash reference\n Returns:      Returns the value returned by add_allowdeny_ips()"},"line":1397,"children":[{"definition":"my","kind":13,"line":1398,"localvar":"my","containerName":"add_logger_allow_deny_ips","name":"$self"},{"kind":13,"line":1398,"name":"$logobj","containerName":"add_logger_allow_deny_ips"},{"localvar":"my","containerName":"add_logger_allow_deny_ips","name":"$TID","kind":13,"definition":"my","line":1399},{"name":"tid","line":1399,"containerName":"add_logger_allow_deny_ips","kind":12},{"line":1401,"name":"$logger","containerName":"add_logger_allow_deny_ips","kind":13},{"kind":12,"containerName":"add_logger_allow_deny_ips","line":1401,"name":"debug"},{"line":1402,"kind":13,"definition":"my","containerName":"add_logger_allow_deny_ips","name":"$chain","localvar":"my"},{"kind":13,"line":1402,"containerName":"add_logger_allow_deny_ips","name":"$self"},{"kind":13,"line":1402,"name":"$logobj","containerName":"add_logger_allow_deny_ips"},{"localvar":"my","containerName":"add_logger_allow_deny_ips","name":"@allowlist","kind":13,"definition":"my","line":1403},{"kind":13,"line":1403,"name":"$logobj","containerName":"add_logger_allow_deny_ips"},{"kind":13,"name":"$logobj","line":1403,"containerName":"add_logger_allow_deny_ips"}],"detail":"()","range":{"end":{"character":9999,"line":1403},"start":{"character":0,"line":1397}},"definition":"sub","kind":12,"name":"add_logger_allow_deny_ips","containerName":"Net::IPBlocker"},{"kind":12,"name":"threads","line":1399},{"kind":12,"name":"configs","line":1402},{"kind":12,"line":1402,"name":"chainprefix"},{"kind":12,"name":"chain","line":1402},{"line":1403,"name":"allowlist","kind":12},{"kind":12,"name":"allowlist","line":1403},{"line":1404,"definition":"my","kind":13,"containerName":null,"name":"@denylist","localvar":"my"},{"kind":13,"containerName":null,"line":1404,"name":"%logobj"},{"line":1404,"name":"denylist","kind":12},{"line":1404,"containerName":null,"name":"%logobj","kind":13},{"kind":12,"line":1404,"name":"denylist"},{"line":1405,"definition":"my","kind":13,"name":"$allowdeny","containerName":null,"localvar":"my"},{"line":1405,"name":"%logobj","containerName":null,"kind":13},{"line":1405,"name":"allowdeny","kind":12},{"line":1407,"kind":13,"definition":"my","name":"%args","containerName":null,"localvar":"my"},{"line":1408,"name":"chain","kind":12},{"kind":13,"containerName":null,"line":1408,"name":"$chain"},{"line":1409,"name":"allowlist","kind":12},{"kind":13,"line":1409,"containerName":null,"name":"@allowlist"},{"line":1410,"name":"denylist","kind":12},{"line":1410,"name":"@denylist","containerName":null,"kind":13},{"name":"allowdeny","line":1411,"kind":12},{"kind":13,"containerName":null,"line":1412,"name":"$allowdeny"},{"line":1414,"name":"$logger","containerName":null,"kind":13},{"name":"debug","line":1414,"containerName":"Net::IPBlocker","kind":12},{"kind":12,"line":1414,"name":"Dumper"},{"containerName":null,"line":1414,"name":"$args","kind":13},{"line":1414,"containerName":null,"name":"$logger","kind":13},{"kind":12,"line":1414,"name":"is_debug","containerName":"Net::IPBlocker"},{"kind":13,"name":"$self","line":1416,"containerName":null},{"name":"add_allowdeny_ips","line":1416,"containerName":"Net::IPBlocker","kind":12},{"kind":13,"line":1416,"name":"$args","containerName":null},{"name":"stop","containerName":"Net::IPBlocker","children":[{"line":1424,"kind":13,"definition":"my","name":"$self","containerName":"stop","localvar":"my"},{"kind":13,"line":1424,"name":"$args","containerName":"stop"},{"kind":13,"definition":"my","line":1425,"localvar":"my","name":"$TID","containerName":"stop"},{"kind":12,"name":"tid","line":1425,"containerName":"stop"},{"kind":13,"line":1426,"name":"$TID","containerName":"stop"},{"kind":13,"containerName":"stop","line":1426,"name":"$TID"},{"kind":13,"containerName":"stop","line":1427,"name":"$logger"},{"kind":12,"containerName":"stop","line":1427,"name":"info"},{"definition":"my","kind":13,"line":1429,"localvar":"my","containerName":"stop","name":"$chains_created"},{"name":"$args","line":1429,"containerName":"stop","kind":13},{"line":1430,"name":"$logger","containerName":"stop","kind":13},{"kind":12,"name":"debug","line":1430,"containerName":"stop"},{"kind":13,"name":"$tracker","line":1430,"containerName":"stop"},{"name":"$logger","line":1430,"containerName":"stop","kind":13},{"line":1430,"name":"is_debug","containerName":"stop","kind":12},{"definition":"my","kind":13,"line":1433,"localvar":"my","name":"@chains_to_remove","containerName":"stop"},{"line":1434,"containerName":"stop","name":"$self","kind":13},{"name":"$chain","containerName":"stop","localvar":"my","line":1435,"definition":"my","kind":13},{"kind":13,"name":"$self","line":1435,"containerName":"stop"},{"line":1436,"name":"@chains_to_remove","containerName":"stop","kind":13},{"containerName":"stop","line":1436,"name":"$chain","kind":13},{"line":1438,"containerName":"stop","name":"@chains_to_remove","kind":13},{"kind":13,"line":1438,"containerName":"stop","name":"$self"},{"kind":13,"line":1439,"containerName":"stop","name":"$logger"},{"line":1439,"containerName":"stop","name":"info","kind":12},{"name":"@chains_to_remove","line":1439,"containerName":"stop","kind":13},{"containerName":"stop","line":1439,"name":"$logger","kind":13},{"containerName":"stop","line":1439,"name":"is_debug","kind":12},{"kind":13,"containerName":"stop","line":1440,"name":"$self"},{"kind":13,"name":"$chains_created","line":1440,"containerName":"stop"},{"kind":13,"containerName":"stop","line":1441,"name":"$logger"},{"containerName":"stop","line":1441,"name":"info","kind":12},{"definition":"my","kind":13,"line":1442,"localvar":"my","containerName":"stop","name":"$chain"},{"kind":13,"line":1442,"containerName":"stop","name":"$self"},{"kind":13,"containerName":"stop","line":1443,"name":"$logger"},{"name":"info","line":1443,"containerName":"stop","kind":12},{"kind":13,"containerName":"stop","line":1444,"name":"$IptablesQueue"},{"containerName":"stop","line":1444,"name":"enqueue","kind":12}],"line":1423,"signature":{"documentation":" Stops the module\n  Future enhancements:\n   Clear the thread queues","label":"stop()","parameters":[]},"kind":12,"range":{"end":{"character":9999,"line":1451},"start":{"line":1423,"character":0}},"definition":"sub","detail":"()"},{"kind":12,"name":"threads","line":1425},{"kind":12,"name":"chains_created","line":1429},{"line":1430,"name":"Dumper","kind":12},{"kind":12,"line":1434,"name":"configs"},{"line":1434,"name":"logs_to_review","kind":12},{"kind":12,"name":"configs","line":1435},{"line":1435,"name":"chainprefix","kind":12},{"name":"configs","line":1438,"kind":12},{"kind":12,"line":1438,"name":"chainprefix"},{"line":1439,"name":"Dumper","kind":12},{"name":"chains_created","line":1440,"kind":12},{"kind":12,"name":"chains_created","line":1442},{"kind":12,"name":"options","line":1446},{"kind":12,"name":"rule","line":1447},{"kind":13,"containerName":null,"line":1453,"name":"$logger"},{"line":1453,"containerName":"Net::IPBlocker","name":"info","kind":12},{"containerName":null,"line":1456,"name":"$logger","kind":13},{"kind":12,"line":1456,"name":"info","containerName":"Net::IPBlocker"},{"line":1457,"name":"clear_queues","kind":12},{"kind":13,"line":1457,"containerName":null,"name":"$logger"},{"kind":12,"containerName":"Net::IPBlocker","line":1457,"name":"error"},{"name":"$logger","line":1458,"containerName":null,"kind":13},{"line":1458,"name":"info","containerName":"Net::IPBlocker","kind":12},{"name":"join_threads","line":1459,"kind":12},{"kind":13,"line":1459,"containerName":null,"name":"$logger"},{"name":"error","line":1459,"containerName":"Net::IPBlocker","kind":12},{"line":1461,"name":"$logger","containerName":null,"kind":13},{"line":1461,"name":"info","containerName":"Net::IPBlocker","kind":12},{"containerName":null,"line":1462,"name":"$lock_obj","kind":13},{"kind":12,"containerName":"Net::IPBlocker","line":1462,"name":"release"},{"line":1463,"containerName":null,"name":"$logger","kind":13},{"kind":12,"line":1463,"name":"info","containerName":"Net::IPBlocker"},{"name":"join_threads","containerName":"Net::IPBlocker","signature":{"label":"join_threads()","parameters":[],"documentation":" Joins all threads\n   Simple sub but really needs some rework\n   If a thread is taking a while to join then it will block the other threads from joining\n   Some of the threads could be reading a log file and if the log file is large then it could take a while or\n   if the log file is causing soem kind of blocking for reading then it could take a while.\n   This may be an issue, if an example, if trying to read a file across NFS or SSHFS and there is a network issue."},"children":[{"containerName":"join_threads","name":"$TID","localvar":"my","line":1475,"kind":13,"definition":"my"},{"kind":12,"containerName":"join_threads","line":1475,"name":"tid"},{"kind":13,"containerName":"join_threads","line":1476,"name":"$TID"},{"line":1476,"name":"$TID","containerName":"join_threads","kind":13},{"line":1477,"containerName":"join_threads","name":"$logger","kind":13},{"kind":12,"containerName":"join_threads","line":1477,"name":"debug"},{"containerName":"join_threads","line":1478,"name":"join","kind":12},{"kind":12,"line":1478,"name":"list","containerName":"join_threads"}],"line":1474,"range":{"start":{"character":0,"line":1474},"end":{"character":9999,"line":1480}},"definition":"sub","detail":"()","kind":12},{"name":"threads","line":1475,"kind":12},{"kind":12,"name":"threads","line":1478},{"kind":12,"definition":"sub","range":{"start":{"line":1483,"character":0},"end":{"line":1501,"character":9999}},"detail":"()","children":[{"line":1484,"definition":"my","kind":13,"containerName":"clear_queues","name":"$TID","localvar":"my"},{"line":1484,"name":"tid","containerName":"clear_queues","kind":12},{"line":1485,"containerName":"clear_queues","name":"$TID","kind":13},{"name":"$TID","line":1485,"containerName":"clear_queues","kind":13},{"kind":13,"line":1486,"name":"$logger","containerName":"clear_queues"},{"kind":12,"line":1486,"containerName":"clear_queues","name":"debug"},{"line":1487,"name":"$IptablesQueue","containerName":"clear_queues","kind":13},{"line":1487,"name":"end","containerName":"clear_queues","kind":12},{"name":"$IptablesQueue","line":1488,"containerName":"clear_queues","kind":13},{"kind":12,"line":1488,"containerName":"clear_queues","name":"pending"},{"kind":13,"name":"$IptablesQueue","line":1489,"containerName":"clear_queues"},{"kind":12,"line":1489,"containerName":"clear_queues","name":"pending"},{"kind":13,"name":"$logger","line":1489,"containerName":"clear_queues"},{"kind":12,"name":"debug","line":1489,"containerName":"clear_queues"},{"kind":13,"name":"$IptablesQueue","line":1493,"containerName":"clear_queues"},{"kind":12,"containerName":"clear_queues","line":1493,"name":"pending"},{"kind":13,"line":1494,"name":"$logger","containerName":"clear_queues"},{"kind":12,"containerName":"clear_queues","line":1494,"name":"error"},{"kind":13,"line":1498,"containerName":"clear_queues","name":"$logger"},{"kind":12,"containerName":"clear_queues","line":1498,"name":"debug"}],"line":1483,"signature":{"parameters":[],"label":"clear_queues()","documentation":" Clears the queues"},"name":"clear_queues","containerName":"Net::IPBlocker"},{"kind":12,"name":"threads","line":1484},{"name":"reload","containerName":"Net::IPBlocker","line":1503,"children":[{"name":"$TID","containerName":"reload","localvar":"my","line":1504,"kind":13,"definition":"my"},{"kind":12,"name":"tid","line":1504,"containerName":"reload"},{"name":"$TID","line":1505,"containerName":"reload","kind":13},{"kind":13,"containerName":"reload","line":1505,"name":"$TID"},{"kind":13,"line":1506,"containerName":"reload","name":"$logger"},{"kind":12,"line":1506,"containerName":"reload","name":"info"}],"signature":{"documentation":"","label":"reload()","parameters":[]},"kind":12,"detail":"()","definition":"sub","range":{"end":{"character":9999,"line":1528},"start":{"line":1503,"character":0}}},{"kind":12,"name":"threads","line":1504},{"line":1532,"children":[{"containerName":"SIG_INT","line":1533,"name":"$logger","kind":13},{"kind":12,"line":1533,"name":"info","containerName":"SIG_INT"}],"kind":12,"range":{"end":{"line":1536,"character":9999},"start":{"character":0,"line":1532}},"definition":"sub","containerName":"Net::IPBlocker","name":"SIG_INT"},{"containerName":"Net::IPBlocker","name":"SIG_HUP","range":{"start":{"character":0,"line":1540},"end":{"character":9999,"line":1543}},"definition":"sub","kind":12,"children":[{"kind":13,"line":1541,"containerName":"SIG_HUP","name":"$logger"},{"kind":12,"line":1541,"name":"info","containerName":"SIG_HUP"}],"line":1540},{"line":1547,"children":[{"line":1548,"name":"$logger","containerName":"SIG_TERM","kind":13},{"kind":12,"line":1548,"containerName":"SIG_TERM","name":"info"}],"definition":"sub","range":{"start":{"line":1547,"character":0},"end":{"character":9999,"line":1550}},"kind":12,"containerName":"Net::IPBlocker","name":"SIG_TERM"},{"containerName":"Net::IPBlocker","name":"SIG_QUIT","children":[{"containerName":"SIG_QUIT","name":"$self","localvar":"my","line":1555,"definition":"my","kind":13}],"line":1554,"kind":12,"definition":"sub","range":{"start":{"line":1554,"character":0},"end":{"line":1557,"character":9999}}},{"name":"set_signal_handler","containerName":"Net::IPBlocker","line":1559,"children":[{"kind":13,"line":1560,"containerName":"set_signal_handler","name":"$logger"},{"line":1560,"containerName":"set_signal_handler","name":"info","kind":12},{"name":"$SIG","line":1562,"containerName":"set_signal_handler","kind":13},{"name":"$SIG","line":1563,"containerName":"set_signal_handler","kind":13},{"kind":13,"name":"$SIG","line":1564,"containerName":"set_signal_handler"},{"kind":13,"line":1565,"containerName":"set_signal_handler","name":"$SIG"}],"signature":{"documentation":"","parameters":[],"label":"set_signal_handler()"},"kind":12,"detail":"()","range":{"start":{"character":0,"line":1559},"end":{"line":1566,"character":9999}},"definition":"sub"},{"kind":12,"name":"INT","line":1562},{"name":"TERM","line":1563,"kind":12},{"line":1564,"name":"HUP","kind":12},{"kind":12,"name":"QUIT","line":1565}]}